/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_TUN_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_TUN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.Device.Tun */

#define NMDBUS_TYPE_DEVICE_TUN (nmdbus_device_tun_get_type ())
#define NMDBUS_DEVICE_TUN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_TUN, NMDBusDeviceTun))
#define NMDBUS_IS_DEVICE_TUN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_TUN))
#define NMDBUS_DEVICE_TUN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_DEVICE_TUN, NMDBusDeviceTunIface))

struct _NMDBusDeviceTun;
typedef struct _NMDBusDeviceTun NMDBusDeviceTun;
typedef struct _NMDBusDeviceTunIface NMDBusDeviceTunIface;

struct _NMDBusDeviceTunIface
{
  GTypeInterface parent_iface;

  gint64  (*get_group) (NMDBusDeviceTun *object);

  const gchar * (*get_hw_address) (NMDBusDeviceTun *object);

  const gchar * (*get_mode) (NMDBusDeviceTun *object);

  gboolean  (*get_multi_queue) (NMDBusDeviceTun *object);

  gboolean  (*get_no_pi) (NMDBusDeviceTun *object);

  gint64  (*get_owner) (NMDBusDeviceTun *object);

  gboolean  (*get_vnet_hdr) (NMDBusDeviceTun *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceTun, g_object_unref)
#endif

GType nmdbus_device_tun_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_device_tun_interface_info (void);
guint nmdbus_device_tun_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
gint64 nmdbus_device_tun_get_owner (NMDBusDeviceTun *object);
void nmdbus_device_tun_set_owner (NMDBusDeviceTun *object, gint64 value);

gint64 nmdbus_device_tun_get_group (NMDBusDeviceTun *object);
void nmdbus_device_tun_set_group (NMDBusDeviceTun *object, gint64 value);

const gchar *nmdbus_device_tun_get_mode (NMDBusDeviceTun *object);
gchar *nmdbus_device_tun_dup_mode (NMDBusDeviceTun *object);
void nmdbus_device_tun_set_mode (NMDBusDeviceTun *object, const gchar *value);

gboolean nmdbus_device_tun_get_no_pi (NMDBusDeviceTun *object);
void nmdbus_device_tun_set_no_pi (NMDBusDeviceTun *object, gboolean value);

gboolean nmdbus_device_tun_get_vnet_hdr (NMDBusDeviceTun *object);
void nmdbus_device_tun_set_vnet_hdr (NMDBusDeviceTun *object, gboolean value);

gboolean nmdbus_device_tun_get_multi_queue (NMDBusDeviceTun *object);
void nmdbus_device_tun_set_multi_queue (NMDBusDeviceTun *object, gboolean value);

const gchar *nmdbus_device_tun_get_hw_address (NMDBusDeviceTun *object);
gchar *nmdbus_device_tun_dup_hw_address (NMDBusDeviceTun *object);
void nmdbus_device_tun_set_hw_address (NMDBusDeviceTun *object, const gchar *value);


/* ---- */

#define NMDBUS_TYPE_DEVICE_TUN_PROXY (nmdbus_device_tun_proxy_get_type ())
#define NMDBUS_DEVICE_TUN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_TUN_PROXY, NMDBusDeviceTunProxy))
#define NMDBUS_DEVICE_TUN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_TUN_PROXY, NMDBusDeviceTunProxyClass))
#define NMDBUS_DEVICE_TUN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_TUN_PROXY, NMDBusDeviceTunProxyClass))
#define NMDBUS_IS_DEVICE_TUN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_TUN_PROXY))
#define NMDBUS_IS_DEVICE_TUN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_TUN_PROXY))

typedef struct _NMDBusDeviceTunProxy NMDBusDeviceTunProxy;
typedef struct _NMDBusDeviceTunProxyClass NMDBusDeviceTunProxyClass;
typedef struct _NMDBusDeviceTunProxyPrivate NMDBusDeviceTunProxyPrivate;

struct _NMDBusDeviceTunProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusDeviceTunProxyPrivate *priv;
};

struct _NMDBusDeviceTunProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_device_tun_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceTunProxy, g_object_unref)
#endif

void nmdbus_device_tun_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceTun *nmdbus_device_tun_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceTun *nmdbus_device_tun_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_device_tun_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceTun *nmdbus_device_tun_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceTun *nmdbus_device_tun_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_DEVICE_TUN_SKELETON (nmdbus_device_tun_skeleton_get_type ())
#define NMDBUS_DEVICE_TUN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_TUN_SKELETON, NMDBusDeviceTunSkeleton))
#define NMDBUS_DEVICE_TUN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_TUN_SKELETON, NMDBusDeviceTunSkeletonClass))
#define NMDBUS_DEVICE_TUN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_TUN_SKELETON, NMDBusDeviceTunSkeletonClass))
#define NMDBUS_IS_DEVICE_TUN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_TUN_SKELETON))
#define NMDBUS_IS_DEVICE_TUN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_TUN_SKELETON))

typedef struct _NMDBusDeviceTunSkeleton NMDBusDeviceTunSkeleton;
typedef struct _NMDBusDeviceTunSkeletonClass NMDBusDeviceTunSkeletonClass;
typedef struct _NMDBusDeviceTunSkeletonPrivate NMDBusDeviceTunSkeletonPrivate;

struct _NMDBusDeviceTunSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusDeviceTunSkeletonPrivate *priv;
};

struct _NMDBusDeviceTunSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_device_tun_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceTunSkeleton, g_object_unref)
#endif

NMDBusDeviceTun *nmdbus_device_tun_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_TUN_H__ */
