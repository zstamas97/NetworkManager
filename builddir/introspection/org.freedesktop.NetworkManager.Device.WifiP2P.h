/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_WIFIP2P_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_WIFIP2P_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.Device.WifiP2P */

#define NMDBUS_TYPE_DEVICE_WIFI_P2P (nmdbus_device_wifi_p2p_get_type ())
#define NMDBUS_DEVICE_WIFI_P2P(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_WIFI_P2P, NMDBusDeviceWifiP2P))
#define NMDBUS_IS_DEVICE_WIFI_P2P(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_WIFI_P2P))
#define NMDBUS_DEVICE_WIFI_P2P_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_DEVICE_WIFI_P2P, NMDBusDeviceWifiP2PIface))

struct _NMDBusDeviceWifiP2P;
typedef struct _NMDBusDeviceWifiP2P NMDBusDeviceWifiP2P;
typedef struct _NMDBusDeviceWifiP2PIface NMDBusDeviceWifiP2PIface;

struct _NMDBusDeviceWifiP2PIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_start_find) (
    NMDBusDeviceWifiP2P *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_options);

  gboolean (*handle_stop_find) (
    NMDBusDeviceWifiP2P *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_hw_address) (NMDBusDeviceWifiP2P *object);

  const gchar *const * (*get_peers) (NMDBusDeviceWifiP2P *object);

  void (*peer_added) (
    NMDBusDeviceWifiP2P *object,
    const gchar *arg_peer);

  void (*peer_removed) (
    NMDBusDeviceWifiP2P *object,
    const gchar *arg_peer);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceWifiP2P, g_object_unref)
#endif

GType nmdbus_device_wifi_p2p_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_device_wifi_p2p_interface_info (void);
guint nmdbus_device_wifi_p2p_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void nmdbus_device_wifi_p2p_complete_start_find (
    NMDBusDeviceWifiP2P *object,
    GDBusMethodInvocation *invocation);

void nmdbus_device_wifi_p2p_complete_stop_find (
    NMDBusDeviceWifiP2P *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void nmdbus_device_wifi_p2p_emit_peer_added (
    NMDBusDeviceWifiP2P *object,
    const gchar *arg_peer);

void nmdbus_device_wifi_p2p_emit_peer_removed (
    NMDBusDeviceWifiP2P *object,
    const gchar *arg_peer);



/* D-Bus method calls: */
void nmdbus_device_wifi_p2p_call_start_find (
    NMDBusDeviceWifiP2P *proxy,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_device_wifi_p2p_call_start_find_finish (
    NMDBusDeviceWifiP2P *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_device_wifi_p2p_call_start_find_sync (
    NMDBusDeviceWifiP2P *proxy,
    GVariant *arg_options,
    GCancellable *cancellable,
    GError **error);

void nmdbus_device_wifi_p2p_call_stop_find (
    NMDBusDeviceWifiP2P *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_device_wifi_p2p_call_stop_find_finish (
    NMDBusDeviceWifiP2P *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_device_wifi_p2p_call_stop_find_sync (
    NMDBusDeviceWifiP2P *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *nmdbus_device_wifi_p2p_get_hw_address (NMDBusDeviceWifiP2P *object);
gchar *nmdbus_device_wifi_p2p_dup_hw_address (NMDBusDeviceWifiP2P *object);
void nmdbus_device_wifi_p2p_set_hw_address (NMDBusDeviceWifiP2P *object, const gchar *value);

const gchar *const *nmdbus_device_wifi_p2p_get_peers (NMDBusDeviceWifiP2P *object);
gchar **nmdbus_device_wifi_p2p_dup_peers (NMDBusDeviceWifiP2P *object);
void nmdbus_device_wifi_p2p_set_peers (NMDBusDeviceWifiP2P *object, const gchar *const *value);


/* ---- */

#define NMDBUS_TYPE_DEVICE_WIFI_P2P_PROXY (nmdbus_device_wifi_p2p_proxy_get_type ())
#define NMDBUS_DEVICE_WIFI_P2P_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_WIFI_P2P_PROXY, NMDBusDeviceWifiP2PProxy))
#define NMDBUS_DEVICE_WIFI_P2P_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_WIFI_P2P_PROXY, NMDBusDeviceWifiP2PProxyClass))
#define NMDBUS_DEVICE_WIFI_P2P_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_WIFI_P2P_PROXY, NMDBusDeviceWifiP2PProxyClass))
#define NMDBUS_IS_DEVICE_WIFI_P2P_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_WIFI_P2P_PROXY))
#define NMDBUS_IS_DEVICE_WIFI_P2P_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_WIFI_P2P_PROXY))

typedef struct _NMDBusDeviceWifiP2PProxy NMDBusDeviceWifiP2PProxy;
typedef struct _NMDBusDeviceWifiP2PProxyClass NMDBusDeviceWifiP2PProxyClass;
typedef struct _NMDBusDeviceWifiP2PProxyPrivate NMDBusDeviceWifiP2PProxyPrivate;

struct _NMDBusDeviceWifiP2PProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusDeviceWifiP2PProxyPrivate *priv;
};

struct _NMDBusDeviceWifiP2PProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_device_wifi_p2p_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceWifiP2PProxy, g_object_unref)
#endif

void nmdbus_device_wifi_p2p_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceWifiP2P *nmdbus_device_wifi_p2p_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceWifiP2P *nmdbus_device_wifi_p2p_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_device_wifi_p2p_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceWifiP2P *nmdbus_device_wifi_p2p_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceWifiP2P *nmdbus_device_wifi_p2p_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_DEVICE_WIFI_P2P_SKELETON (nmdbus_device_wifi_p2p_skeleton_get_type ())
#define NMDBUS_DEVICE_WIFI_P2P_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_WIFI_P2P_SKELETON, NMDBusDeviceWifiP2PSkeleton))
#define NMDBUS_DEVICE_WIFI_P2P_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_WIFI_P2P_SKELETON, NMDBusDeviceWifiP2PSkeletonClass))
#define NMDBUS_DEVICE_WIFI_P2P_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_WIFI_P2P_SKELETON, NMDBusDeviceWifiP2PSkeletonClass))
#define NMDBUS_IS_DEVICE_WIFI_P2P_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_WIFI_P2P_SKELETON))
#define NMDBUS_IS_DEVICE_WIFI_P2P_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_WIFI_P2P_SKELETON))

typedef struct _NMDBusDeviceWifiP2PSkeleton NMDBusDeviceWifiP2PSkeleton;
typedef struct _NMDBusDeviceWifiP2PSkeletonClass NMDBusDeviceWifiP2PSkeletonClass;
typedef struct _NMDBusDeviceWifiP2PSkeletonPrivate NMDBusDeviceWifiP2PSkeletonPrivate;

struct _NMDBusDeviceWifiP2PSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusDeviceWifiP2PSkeletonPrivate *priv;
};

struct _NMDBusDeviceWifiP2PSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_device_wifi_p2p_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceWifiP2PSkeleton, g_object_unref)
#endif

NMDBusDeviceWifiP2P *nmdbus_device_wifi_p2p_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_WIFIP2P_H__ */
