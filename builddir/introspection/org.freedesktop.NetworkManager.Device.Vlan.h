/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_VLAN_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_VLAN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.Device.Vlan */

#define NMDBUS_TYPE_DEVICE_VLAN (nmdbus_device_vlan_get_type ())
#define NMDBUS_DEVICE_VLAN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_VLAN, NMDBusDeviceVlan))
#define NMDBUS_IS_DEVICE_VLAN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_VLAN))
#define NMDBUS_DEVICE_VLAN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_DEVICE_VLAN, NMDBusDeviceVlanIface))

struct _NMDBusDeviceVlan;
typedef struct _NMDBusDeviceVlan NMDBusDeviceVlan;
typedef struct _NMDBusDeviceVlanIface NMDBusDeviceVlanIface;

struct _NMDBusDeviceVlanIface
{
  GTypeInterface parent_iface;

  gboolean  (*get_carrier) (NMDBusDeviceVlan *object);

  const gchar * (*get_hw_address) (NMDBusDeviceVlan *object);

  const gchar * (*get_parent) (NMDBusDeviceVlan *object);

  guint  (*get_vlan_id) (NMDBusDeviceVlan *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceVlan, g_object_unref)
#endif

GType nmdbus_device_vlan_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_device_vlan_interface_info (void);
guint nmdbus_device_vlan_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
const gchar *nmdbus_device_vlan_get_hw_address (NMDBusDeviceVlan *object);
gchar *nmdbus_device_vlan_dup_hw_address (NMDBusDeviceVlan *object);
void nmdbus_device_vlan_set_hw_address (NMDBusDeviceVlan *object, const gchar *value);

gboolean nmdbus_device_vlan_get_carrier (NMDBusDeviceVlan *object);
void nmdbus_device_vlan_set_carrier (NMDBusDeviceVlan *object, gboolean value);

const gchar *nmdbus_device_vlan_get_parent (NMDBusDeviceVlan *object);
gchar *nmdbus_device_vlan_dup_parent (NMDBusDeviceVlan *object);
void nmdbus_device_vlan_set_parent (NMDBusDeviceVlan *object, const gchar *value);

guint nmdbus_device_vlan_get_vlan_id (NMDBusDeviceVlan *object);
void nmdbus_device_vlan_set_vlan_id (NMDBusDeviceVlan *object, guint value);


/* ---- */

#define NMDBUS_TYPE_DEVICE_VLAN_PROXY (nmdbus_device_vlan_proxy_get_type ())
#define NMDBUS_DEVICE_VLAN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_VLAN_PROXY, NMDBusDeviceVlanProxy))
#define NMDBUS_DEVICE_VLAN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_VLAN_PROXY, NMDBusDeviceVlanProxyClass))
#define NMDBUS_DEVICE_VLAN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_VLAN_PROXY, NMDBusDeviceVlanProxyClass))
#define NMDBUS_IS_DEVICE_VLAN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_VLAN_PROXY))
#define NMDBUS_IS_DEVICE_VLAN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_VLAN_PROXY))

typedef struct _NMDBusDeviceVlanProxy NMDBusDeviceVlanProxy;
typedef struct _NMDBusDeviceVlanProxyClass NMDBusDeviceVlanProxyClass;
typedef struct _NMDBusDeviceVlanProxyPrivate NMDBusDeviceVlanProxyPrivate;

struct _NMDBusDeviceVlanProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusDeviceVlanProxyPrivate *priv;
};

struct _NMDBusDeviceVlanProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_device_vlan_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceVlanProxy, g_object_unref)
#endif

void nmdbus_device_vlan_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceVlan *nmdbus_device_vlan_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceVlan *nmdbus_device_vlan_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_device_vlan_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceVlan *nmdbus_device_vlan_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceVlan *nmdbus_device_vlan_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_DEVICE_VLAN_SKELETON (nmdbus_device_vlan_skeleton_get_type ())
#define NMDBUS_DEVICE_VLAN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_VLAN_SKELETON, NMDBusDeviceVlanSkeleton))
#define NMDBUS_DEVICE_VLAN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_VLAN_SKELETON, NMDBusDeviceVlanSkeletonClass))
#define NMDBUS_DEVICE_VLAN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_VLAN_SKELETON, NMDBusDeviceVlanSkeletonClass))
#define NMDBUS_IS_DEVICE_VLAN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_VLAN_SKELETON))
#define NMDBUS_IS_DEVICE_VLAN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_VLAN_SKELETON))

typedef struct _NMDBusDeviceVlanSkeleton NMDBusDeviceVlanSkeleton;
typedef struct _NMDBusDeviceVlanSkeletonClass NMDBusDeviceVlanSkeletonClass;
typedef struct _NMDBusDeviceVlanSkeletonPrivate NMDBusDeviceVlanSkeletonPrivate;

struct _NMDBusDeviceVlanSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusDeviceVlanSkeletonPrivate *priv;
};

struct _NMDBusDeviceVlanSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_device_vlan_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceVlanSkeleton, g_object_unref)
#endif

NMDBusDeviceVlan *nmdbus_device_vlan_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_VLAN_H__ */
