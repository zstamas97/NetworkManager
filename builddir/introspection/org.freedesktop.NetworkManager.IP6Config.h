/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_IP6CONFIG_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_IP6CONFIG_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.IP6Config */

#define NMDBUS_TYPE_IP6_CONFIG (nmdbus_ip6_config_get_type ())
#define NMDBUS_IP6_CONFIG(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_IP6_CONFIG, NMDBusIP6Config))
#define NMDBUS_IS_IP6_CONFIG(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_IP6_CONFIG))
#define NMDBUS_IP6_CONFIG_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_IP6_CONFIG, NMDBusIP6ConfigIface))

struct _NMDBusIP6Config;
typedef struct _NMDBusIP6Config NMDBusIP6Config;
typedef struct _NMDBusIP6ConfigIface NMDBusIP6ConfigIface;

struct _NMDBusIP6ConfigIface
{
  GTypeInterface parent_iface;

  GVariant * (*get_address_data) (NMDBusIP6Config *object);

  GVariant * (*get_addresses) (NMDBusIP6Config *object);

  const gchar *const * (*get_dns_options) (NMDBusIP6Config *object);

  gint  (*get_dns_priority) (NMDBusIP6Config *object);

  const gchar *const * (*get_domains) (NMDBusIP6Config *object);

  const gchar * (*get_gateway) (NMDBusIP6Config *object);

  GVariant * (*get_nameservers) (NMDBusIP6Config *object);

  GVariant * (*get_route_data) (NMDBusIP6Config *object);

  GVariant * (*get_routes) (NMDBusIP6Config *object);

  const gchar *const * (*get_searches) (NMDBusIP6Config *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusIP6Config, g_object_unref)
#endif

GType nmdbus_ip6_config_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_ip6_config_interface_info (void);
guint nmdbus_ip6_config_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
GVariant *nmdbus_ip6_config_get_addresses (NMDBusIP6Config *object);
GVariant *nmdbus_ip6_config_dup_addresses (NMDBusIP6Config *object);
void nmdbus_ip6_config_set_addresses (NMDBusIP6Config *object, GVariant *value);

GVariant *nmdbus_ip6_config_get_address_data (NMDBusIP6Config *object);
GVariant *nmdbus_ip6_config_dup_address_data (NMDBusIP6Config *object);
void nmdbus_ip6_config_set_address_data (NMDBusIP6Config *object, GVariant *value);

const gchar *nmdbus_ip6_config_get_gateway (NMDBusIP6Config *object);
gchar *nmdbus_ip6_config_dup_gateway (NMDBusIP6Config *object);
void nmdbus_ip6_config_set_gateway (NMDBusIP6Config *object, const gchar *value);

GVariant *nmdbus_ip6_config_get_routes (NMDBusIP6Config *object);
GVariant *nmdbus_ip6_config_dup_routes (NMDBusIP6Config *object);
void nmdbus_ip6_config_set_routes (NMDBusIP6Config *object, GVariant *value);

GVariant *nmdbus_ip6_config_get_route_data (NMDBusIP6Config *object);
GVariant *nmdbus_ip6_config_dup_route_data (NMDBusIP6Config *object);
void nmdbus_ip6_config_set_route_data (NMDBusIP6Config *object, GVariant *value);

GVariant *nmdbus_ip6_config_get_nameservers (NMDBusIP6Config *object);
GVariant *nmdbus_ip6_config_dup_nameservers (NMDBusIP6Config *object);
void nmdbus_ip6_config_set_nameservers (NMDBusIP6Config *object, GVariant *value);

const gchar *const *nmdbus_ip6_config_get_domains (NMDBusIP6Config *object);
gchar **nmdbus_ip6_config_dup_domains (NMDBusIP6Config *object);
void nmdbus_ip6_config_set_domains (NMDBusIP6Config *object, const gchar *const *value);

const gchar *const *nmdbus_ip6_config_get_searches (NMDBusIP6Config *object);
gchar **nmdbus_ip6_config_dup_searches (NMDBusIP6Config *object);
void nmdbus_ip6_config_set_searches (NMDBusIP6Config *object, const gchar *const *value);

const gchar *const *nmdbus_ip6_config_get_dns_options (NMDBusIP6Config *object);
gchar **nmdbus_ip6_config_dup_dns_options (NMDBusIP6Config *object);
void nmdbus_ip6_config_set_dns_options (NMDBusIP6Config *object, const gchar *const *value);

gint nmdbus_ip6_config_get_dns_priority (NMDBusIP6Config *object);
void nmdbus_ip6_config_set_dns_priority (NMDBusIP6Config *object, gint value);


/* ---- */

#define NMDBUS_TYPE_IP6_CONFIG_PROXY (nmdbus_ip6_config_proxy_get_type ())
#define NMDBUS_IP6_CONFIG_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_IP6_CONFIG_PROXY, NMDBusIP6ConfigProxy))
#define NMDBUS_IP6_CONFIG_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_IP6_CONFIG_PROXY, NMDBusIP6ConfigProxyClass))
#define NMDBUS_IP6_CONFIG_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_IP6_CONFIG_PROXY, NMDBusIP6ConfigProxyClass))
#define NMDBUS_IS_IP6_CONFIG_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_IP6_CONFIG_PROXY))
#define NMDBUS_IS_IP6_CONFIG_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_IP6_CONFIG_PROXY))

typedef struct _NMDBusIP6ConfigProxy NMDBusIP6ConfigProxy;
typedef struct _NMDBusIP6ConfigProxyClass NMDBusIP6ConfigProxyClass;
typedef struct _NMDBusIP6ConfigProxyPrivate NMDBusIP6ConfigProxyPrivate;

struct _NMDBusIP6ConfigProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusIP6ConfigProxyPrivate *priv;
};

struct _NMDBusIP6ConfigProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_ip6_config_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusIP6ConfigProxy, g_object_unref)
#endif

void nmdbus_ip6_config_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusIP6Config *nmdbus_ip6_config_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusIP6Config *nmdbus_ip6_config_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_ip6_config_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusIP6Config *nmdbus_ip6_config_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusIP6Config *nmdbus_ip6_config_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_IP6_CONFIG_SKELETON (nmdbus_ip6_config_skeleton_get_type ())
#define NMDBUS_IP6_CONFIG_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_IP6_CONFIG_SKELETON, NMDBusIP6ConfigSkeleton))
#define NMDBUS_IP6_CONFIG_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_IP6_CONFIG_SKELETON, NMDBusIP6ConfigSkeletonClass))
#define NMDBUS_IP6_CONFIG_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_IP6_CONFIG_SKELETON, NMDBusIP6ConfigSkeletonClass))
#define NMDBUS_IS_IP6_CONFIG_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_IP6_CONFIG_SKELETON))
#define NMDBUS_IS_IP6_CONFIG_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_IP6_CONFIG_SKELETON))

typedef struct _NMDBusIP6ConfigSkeleton NMDBusIP6ConfigSkeleton;
typedef struct _NMDBusIP6ConfigSkeletonClass NMDBusIP6ConfigSkeletonClass;
typedef struct _NMDBusIP6ConfigSkeletonPrivate NMDBusIP6ConfigSkeletonPrivate;

struct _NMDBusIP6ConfigSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusIP6ConfigSkeletonPrivate *priv;
};

struct _NMDBusIP6ConfigSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_ip6_config_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusIP6ConfigSkeleton, g_object_unref)
#endif

NMDBusIP6Config *nmdbus_ip6_config_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_IP6CONFIG_H__ */
