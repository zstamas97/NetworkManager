/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_DNSMANAGER_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_DNSMANAGER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.DnsManager */

#define NMDBUS_TYPE_DNS_MANAGER (nmdbus_dns_manager_get_type ())
#define NMDBUS_DNS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DNS_MANAGER, NMDBusDnsManager))
#define NMDBUS_IS_DNS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DNS_MANAGER))
#define NMDBUS_DNS_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_DNS_MANAGER, NMDBusDnsManagerIface))

struct _NMDBusDnsManager;
typedef struct _NMDBusDnsManager NMDBusDnsManager;
typedef struct _NMDBusDnsManagerIface NMDBusDnsManagerIface;

struct _NMDBusDnsManagerIface
{
  GTypeInterface parent_iface;

  GVariant * (*get_configuration) (NMDBusDnsManager *object);

  const gchar * (*get_mode) (NMDBusDnsManager *object);

  const gchar * (*get_rc_manager) (NMDBusDnsManager *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDnsManager, g_object_unref)
#endif

GType nmdbus_dns_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_dns_manager_interface_info (void);
guint nmdbus_dns_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
const gchar *nmdbus_dns_manager_get_mode (NMDBusDnsManager *object);
gchar *nmdbus_dns_manager_dup_mode (NMDBusDnsManager *object);
void nmdbus_dns_manager_set_mode (NMDBusDnsManager *object, const gchar *value);

const gchar *nmdbus_dns_manager_get_rc_manager (NMDBusDnsManager *object);
gchar *nmdbus_dns_manager_dup_rc_manager (NMDBusDnsManager *object);
void nmdbus_dns_manager_set_rc_manager (NMDBusDnsManager *object, const gchar *value);

GVariant *nmdbus_dns_manager_get_configuration (NMDBusDnsManager *object);
GVariant *nmdbus_dns_manager_dup_configuration (NMDBusDnsManager *object);
void nmdbus_dns_manager_set_configuration (NMDBusDnsManager *object, GVariant *value);


/* ---- */

#define NMDBUS_TYPE_DNS_MANAGER_PROXY (nmdbus_dns_manager_proxy_get_type ())
#define NMDBUS_DNS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DNS_MANAGER_PROXY, NMDBusDnsManagerProxy))
#define NMDBUS_DNS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DNS_MANAGER_PROXY, NMDBusDnsManagerProxyClass))
#define NMDBUS_DNS_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DNS_MANAGER_PROXY, NMDBusDnsManagerProxyClass))
#define NMDBUS_IS_DNS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DNS_MANAGER_PROXY))
#define NMDBUS_IS_DNS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DNS_MANAGER_PROXY))

typedef struct _NMDBusDnsManagerProxy NMDBusDnsManagerProxy;
typedef struct _NMDBusDnsManagerProxyClass NMDBusDnsManagerProxyClass;
typedef struct _NMDBusDnsManagerProxyPrivate NMDBusDnsManagerProxyPrivate;

struct _NMDBusDnsManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusDnsManagerProxyPrivate *priv;
};

struct _NMDBusDnsManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_dns_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDnsManagerProxy, g_object_unref)
#endif

void nmdbus_dns_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDnsManager *nmdbus_dns_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDnsManager *nmdbus_dns_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_dns_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDnsManager *nmdbus_dns_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDnsManager *nmdbus_dns_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_DNS_MANAGER_SKELETON (nmdbus_dns_manager_skeleton_get_type ())
#define NMDBUS_DNS_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DNS_MANAGER_SKELETON, NMDBusDnsManagerSkeleton))
#define NMDBUS_DNS_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DNS_MANAGER_SKELETON, NMDBusDnsManagerSkeletonClass))
#define NMDBUS_DNS_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DNS_MANAGER_SKELETON, NMDBusDnsManagerSkeletonClass))
#define NMDBUS_IS_DNS_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DNS_MANAGER_SKELETON))
#define NMDBUS_IS_DNS_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DNS_MANAGER_SKELETON))

typedef struct _NMDBusDnsManagerSkeleton NMDBusDnsManagerSkeleton;
typedef struct _NMDBusDnsManagerSkeletonClass NMDBusDnsManagerSkeletonClass;
typedef struct _NMDBusDnsManagerSkeletonPrivate NMDBusDnsManagerSkeletonPrivate;

struct _NMDBusDnsManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusDnsManagerSkeletonPrivate *priv;
};

struct _NMDBusDnsManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_dns_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDnsManagerSkeleton, g_object_unref)
#endif

NMDBusDnsManager *nmdbus_dns_manager_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_DNSMANAGER_H__ */
