/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_WIREGUARD_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_WIREGUARD_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.Device.WireGuard */

#define NMDBUS_TYPE_DEVICE_WIRE_GUARD (nmdbus_device_wire_guard_get_type ())
#define NMDBUS_DEVICE_WIRE_GUARD(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_WIRE_GUARD, NMDBusDeviceWireGuard))
#define NMDBUS_IS_DEVICE_WIRE_GUARD(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_WIRE_GUARD))
#define NMDBUS_DEVICE_WIRE_GUARD_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_DEVICE_WIRE_GUARD, NMDBusDeviceWireGuardIface))

struct _NMDBusDeviceWireGuard;
typedef struct _NMDBusDeviceWireGuard NMDBusDeviceWireGuard;
typedef struct _NMDBusDeviceWireGuardIface NMDBusDeviceWireGuardIface;

struct _NMDBusDeviceWireGuardIface
{
  GTypeInterface parent_iface;

  guint  (*get_fw_mark) (NMDBusDeviceWireGuard *object);

  guint16  (*get_listen_port) (NMDBusDeviceWireGuard *object);

  GVariant * (*get_public_key) (NMDBusDeviceWireGuard *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceWireGuard, g_object_unref)
#endif

GType nmdbus_device_wire_guard_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_device_wire_guard_interface_info (void);
guint nmdbus_device_wire_guard_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
GVariant *nmdbus_device_wire_guard_get_public_key (NMDBusDeviceWireGuard *object);
GVariant *nmdbus_device_wire_guard_dup_public_key (NMDBusDeviceWireGuard *object);
void nmdbus_device_wire_guard_set_public_key (NMDBusDeviceWireGuard *object, GVariant *value);

guint16 nmdbus_device_wire_guard_get_listen_port (NMDBusDeviceWireGuard *object);
void nmdbus_device_wire_guard_set_listen_port (NMDBusDeviceWireGuard *object, guint16 value);

guint nmdbus_device_wire_guard_get_fw_mark (NMDBusDeviceWireGuard *object);
void nmdbus_device_wire_guard_set_fw_mark (NMDBusDeviceWireGuard *object, guint value);


/* ---- */

#define NMDBUS_TYPE_DEVICE_WIRE_GUARD_PROXY (nmdbus_device_wire_guard_proxy_get_type ())
#define NMDBUS_DEVICE_WIRE_GUARD_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_WIRE_GUARD_PROXY, NMDBusDeviceWireGuardProxy))
#define NMDBUS_DEVICE_WIRE_GUARD_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_WIRE_GUARD_PROXY, NMDBusDeviceWireGuardProxyClass))
#define NMDBUS_DEVICE_WIRE_GUARD_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_WIRE_GUARD_PROXY, NMDBusDeviceWireGuardProxyClass))
#define NMDBUS_IS_DEVICE_WIRE_GUARD_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_WIRE_GUARD_PROXY))
#define NMDBUS_IS_DEVICE_WIRE_GUARD_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_WIRE_GUARD_PROXY))

typedef struct _NMDBusDeviceWireGuardProxy NMDBusDeviceWireGuardProxy;
typedef struct _NMDBusDeviceWireGuardProxyClass NMDBusDeviceWireGuardProxyClass;
typedef struct _NMDBusDeviceWireGuardProxyPrivate NMDBusDeviceWireGuardProxyPrivate;

struct _NMDBusDeviceWireGuardProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusDeviceWireGuardProxyPrivate *priv;
};

struct _NMDBusDeviceWireGuardProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_device_wire_guard_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceWireGuardProxy, g_object_unref)
#endif

void nmdbus_device_wire_guard_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceWireGuard *nmdbus_device_wire_guard_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceWireGuard *nmdbus_device_wire_guard_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_device_wire_guard_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceWireGuard *nmdbus_device_wire_guard_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceWireGuard *nmdbus_device_wire_guard_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_DEVICE_WIRE_GUARD_SKELETON (nmdbus_device_wire_guard_skeleton_get_type ())
#define NMDBUS_DEVICE_WIRE_GUARD_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_WIRE_GUARD_SKELETON, NMDBusDeviceWireGuardSkeleton))
#define NMDBUS_DEVICE_WIRE_GUARD_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_WIRE_GUARD_SKELETON, NMDBusDeviceWireGuardSkeletonClass))
#define NMDBUS_DEVICE_WIRE_GUARD_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_WIRE_GUARD_SKELETON, NMDBusDeviceWireGuardSkeletonClass))
#define NMDBUS_IS_DEVICE_WIRE_GUARD_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_WIRE_GUARD_SKELETON))
#define NMDBUS_IS_DEVICE_WIRE_GUARD_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_WIRE_GUARD_SKELETON))

typedef struct _NMDBusDeviceWireGuardSkeleton NMDBusDeviceWireGuardSkeleton;
typedef struct _NMDBusDeviceWireGuardSkeletonClass NMDBusDeviceWireGuardSkeletonClass;
typedef struct _NMDBusDeviceWireGuardSkeletonPrivate NMDBusDeviceWireGuardSkeletonPrivate;

struct _NMDBusDeviceWireGuardSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusDeviceWireGuardSkeletonPrivate *priv;
};

struct _NMDBusDeviceWireGuardSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_device_wire_guard_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceWireGuardSkeleton, g_object_unref)
#endif

NMDBusDeviceWireGuard *nmdbus_device_wire_guard_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_WIREGUARD_H__ */
