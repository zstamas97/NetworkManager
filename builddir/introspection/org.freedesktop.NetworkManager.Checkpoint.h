/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_CHECKPOINT_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_CHECKPOINT_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.Checkpoint */

#define NMDBUS_TYPE_CHECKPOINT (nmdbus_checkpoint_get_type ())
#define NMDBUS_CHECKPOINT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_CHECKPOINT, NMDBusCheckpoint))
#define NMDBUS_IS_CHECKPOINT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_CHECKPOINT))
#define NMDBUS_CHECKPOINT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_CHECKPOINT, NMDBusCheckpointIface))

struct _NMDBusCheckpoint;
typedef struct _NMDBusCheckpoint NMDBusCheckpoint;
typedef struct _NMDBusCheckpointIface NMDBusCheckpointIface;

struct _NMDBusCheckpointIface
{
  GTypeInterface parent_iface;

  gint64  (*get_created) (NMDBusCheckpoint *object);

  const gchar *const * (*get_devices) (NMDBusCheckpoint *object);

  guint  (*get_rollback_timeout) (NMDBusCheckpoint *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusCheckpoint, g_object_unref)
#endif

GType nmdbus_checkpoint_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_checkpoint_interface_info (void);
guint nmdbus_checkpoint_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
const gchar *const *nmdbus_checkpoint_get_devices (NMDBusCheckpoint *object);
gchar **nmdbus_checkpoint_dup_devices (NMDBusCheckpoint *object);
void nmdbus_checkpoint_set_devices (NMDBusCheckpoint *object, const gchar *const *value);

gint64 nmdbus_checkpoint_get_created (NMDBusCheckpoint *object);
void nmdbus_checkpoint_set_created (NMDBusCheckpoint *object, gint64 value);

guint nmdbus_checkpoint_get_rollback_timeout (NMDBusCheckpoint *object);
void nmdbus_checkpoint_set_rollback_timeout (NMDBusCheckpoint *object, guint value);


/* ---- */

#define NMDBUS_TYPE_CHECKPOINT_PROXY (nmdbus_checkpoint_proxy_get_type ())
#define NMDBUS_CHECKPOINT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_CHECKPOINT_PROXY, NMDBusCheckpointProxy))
#define NMDBUS_CHECKPOINT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_CHECKPOINT_PROXY, NMDBusCheckpointProxyClass))
#define NMDBUS_CHECKPOINT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_CHECKPOINT_PROXY, NMDBusCheckpointProxyClass))
#define NMDBUS_IS_CHECKPOINT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_CHECKPOINT_PROXY))
#define NMDBUS_IS_CHECKPOINT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_CHECKPOINT_PROXY))

typedef struct _NMDBusCheckpointProxy NMDBusCheckpointProxy;
typedef struct _NMDBusCheckpointProxyClass NMDBusCheckpointProxyClass;
typedef struct _NMDBusCheckpointProxyPrivate NMDBusCheckpointProxyPrivate;

struct _NMDBusCheckpointProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusCheckpointProxyPrivate *priv;
};

struct _NMDBusCheckpointProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_checkpoint_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusCheckpointProxy, g_object_unref)
#endif

void nmdbus_checkpoint_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusCheckpoint *nmdbus_checkpoint_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusCheckpoint *nmdbus_checkpoint_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_checkpoint_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusCheckpoint *nmdbus_checkpoint_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusCheckpoint *nmdbus_checkpoint_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_CHECKPOINT_SKELETON (nmdbus_checkpoint_skeleton_get_type ())
#define NMDBUS_CHECKPOINT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_CHECKPOINT_SKELETON, NMDBusCheckpointSkeleton))
#define NMDBUS_CHECKPOINT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_CHECKPOINT_SKELETON, NMDBusCheckpointSkeletonClass))
#define NMDBUS_CHECKPOINT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_CHECKPOINT_SKELETON, NMDBusCheckpointSkeletonClass))
#define NMDBUS_IS_CHECKPOINT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_CHECKPOINT_SKELETON))
#define NMDBUS_IS_CHECKPOINT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_CHECKPOINT_SKELETON))

typedef struct _NMDBusCheckpointSkeleton NMDBusCheckpointSkeleton;
typedef struct _NMDBusCheckpointSkeletonClass NMDBusCheckpointSkeletonClass;
typedef struct _NMDBusCheckpointSkeletonPrivate NMDBusCheckpointSkeletonPrivate;

struct _NMDBusCheckpointSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusCheckpointSkeletonPrivate *priv;
};

struct _NMDBusCheckpointSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_checkpoint_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusCheckpointSkeleton, g_object_unref)
#endif

NMDBusCheckpoint *nmdbus_checkpoint_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_CHECKPOINT_H__ */
