/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_VRF_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_VRF_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.Device.Vrf */

#define NMDBUS_TYPE_DEVICE_VRF (nmdbus_device_vrf_get_type ())
#define NMDBUS_DEVICE_VRF(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_VRF, NMDBusDeviceVrf))
#define NMDBUS_IS_DEVICE_VRF(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_VRF))
#define NMDBUS_DEVICE_VRF_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_DEVICE_VRF, NMDBusDeviceVrfIface))

struct _NMDBusDeviceVrf;
typedef struct _NMDBusDeviceVrf NMDBusDeviceVrf;
typedef struct _NMDBusDeviceVrfIface NMDBusDeviceVrfIface;

struct _NMDBusDeviceVrfIface
{
  GTypeInterface parent_iface;

  guint  (*get_table) (NMDBusDeviceVrf *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceVrf, g_object_unref)
#endif

GType nmdbus_device_vrf_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_device_vrf_interface_info (void);
guint nmdbus_device_vrf_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
guint nmdbus_device_vrf_get_table (NMDBusDeviceVrf *object);
void nmdbus_device_vrf_set_table (NMDBusDeviceVrf *object, guint value);


/* ---- */

#define NMDBUS_TYPE_DEVICE_VRF_PROXY (nmdbus_device_vrf_proxy_get_type ())
#define NMDBUS_DEVICE_VRF_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_VRF_PROXY, NMDBusDeviceVrfProxy))
#define NMDBUS_DEVICE_VRF_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_VRF_PROXY, NMDBusDeviceVrfProxyClass))
#define NMDBUS_DEVICE_VRF_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_VRF_PROXY, NMDBusDeviceVrfProxyClass))
#define NMDBUS_IS_DEVICE_VRF_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_VRF_PROXY))
#define NMDBUS_IS_DEVICE_VRF_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_VRF_PROXY))

typedef struct _NMDBusDeviceVrfProxy NMDBusDeviceVrfProxy;
typedef struct _NMDBusDeviceVrfProxyClass NMDBusDeviceVrfProxyClass;
typedef struct _NMDBusDeviceVrfProxyPrivate NMDBusDeviceVrfProxyPrivate;

struct _NMDBusDeviceVrfProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusDeviceVrfProxyPrivate *priv;
};

struct _NMDBusDeviceVrfProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_device_vrf_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceVrfProxy, g_object_unref)
#endif

void nmdbus_device_vrf_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceVrf *nmdbus_device_vrf_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceVrf *nmdbus_device_vrf_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_device_vrf_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceVrf *nmdbus_device_vrf_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceVrf *nmdbus_device_vrf_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_DEVICE_VRF_SKELETON (nmdbus_device_vrf_skeleton_get_type ())
#define NMDBUS_DEVICE_VRF_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_VRF_SKELETON, NMDBusDeviceVrfSkeleton))
#define NMDBUS_DEVICE_VRF_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_VRF_SKELETON, NMDBusDeviceVrfSkeletonClass))
#define NMDBUS_DEVICE_VRF_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_VRF_SKELETON, NMDBusDeviceVrfSkeletonClass))
#define NMDBUS_IS_DEVICE_VRF_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_VRF_SKELETON))
#define NMDBUS_IS_DEVICE_VRF_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_VRF_SKELETON))

typedef struct _NMDBusDeviceVrfSkeleton NMDBusDeviceVrfSkeleton;
typedef struct _NMDBusDeviceVrfSkeletonClass NMDBusDeviceVrfSkeletonClass;
typedef struct _NMDBusDeviceVrfSkeletonPrivate NMDBusDeviceVrfSkeletonPrivate;

struct _NMDBusDeviceVrfSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusDeviceVrfSkeletonPrivate *priv;
};

struct _NMDBusDeviceVrfSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_device_vrf_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceVrfSkeleton, g_object_unref)
#endif

NMDBusDeviceVrf *nmdbus_device_vrf_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_VRF_H__ */
