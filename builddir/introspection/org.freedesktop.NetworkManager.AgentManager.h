/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_AGENTMANAGER_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_AGENTMANAGER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.AgentManager */

#define NMDBUS_TYPE_AGENT_MANAGER (nmdbus_agent_manager_get_type ())
#define NMDBUS_AGENT_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_AGENT_MANAGER, NMDBusAgentManager))
#define NMDBUS_IS_AGENT_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_AGENT_MANAGER))
#define NMDBUS_AGENT_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_AGENT_MANAGER, NMDBusAgentManagerIface))

struct _NMDBusAgentManager;
typedef struct _NMDBusAgentManager NMDBusAgentManager;
typedef struct _NMDBusAgentManagerIface NMDBusAgentManagerIface;

struct _NMDBusAgentManagerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_register) (
    NMDBusAgentManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_identifier);

  gboolean (*handle_register_with_capabilities) (
    NMDBusAgentManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_identifier,
    guint arg_capabilities);

  gboolean (*handle_unregister) (
    NMDBusAgentManager *object,
    GDBusMethodInvocation *invocation);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusAgentManager, g_object_unref)
#endif

GType nmdbus_agent_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_agent_manager_interface_info (void);
guint nmdbus_agent_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void nmdbus_agent_manager_complete_register (
    NMDBusAgentManager *object,
    GDBusMethodInvocation *invocation);

void nmdbus_agent_manager_complete_register_with_capabilities (
    NMDBusAgentManager *object,
    GDBusMethodInvocation *invocation);

void nmdbus_agent_manager_complete_unregister (
    NMDBusAgentManager *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void nmdbus_agent_manager_call_register (
    NMDBusAgentManager *proxy,
    const gchar *arg_identifier,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_agent_manager_call_register_finish (
    NMDBusAgentManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_agent_manager_call_register_sync (
    NMDBusAgentManager *proxy,
    const gchar *arg_identifier,
    GCancellable *cancellable,
    GError **error);

void nmdbus_agent_manager_call_register_with_capabilities (
    NMDBusAgentManager *proxy,
    const gchar *arg_identifier,
    guint arg_capabilities,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_agent_manager_call_register_with_capabilities_finish (
    NMDBusAgentManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_agent_manager_call_register_with_capabilities_sync (
    NMDBusAgentManager *proxy,
    const gchar *arg_identifier,
    guint arg_capabilities,
    GCancellable *cancellable,
    GError **error);

void nmdbus_agent_manager_call_unregister (
    NMDBusAgentManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_agent_manager_call_unregister_finish (
    NMDBusAgentManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_agent_manager_call_unregister_sync (
    NMDBusAgentManager *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define NMDBUS_TYPE_AGENT_MANAGER_PROXY (nmdbus_agent_manager_proxy_get_type ())
#define NMDBUS_AGENT_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_AGENT_MANAGER_PROXY, NMDBusAgentManagerProxy))
#define NMDBUS_AGENT_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_AGENT_MANAGER_PROXY, NMDBusAgentManagerProxyClass))
#define NMDBUS_AGENT_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_AGENT_MANAGER_PROXY, NMDBusAgentManagerProxyClass))
#define NMDBUS_IS_AGENT_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_AGENT_MANAGER_PROXY))
#define NMDBUS_IS_AGENT_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_AGENT_MANAGER_PROXY))

typedef struct _NMDBusAgentManagerProxy NMDBusAgentManagerProxy;
typedef struct _NMDBusAgentManagerProxyClass NMDBusAgentManagerProxyClass;
typedef struct _NMDBusAgentManagerProxyPrivate NMDBusAgentManagerProxyPrivate;

struct _NMDBusAgentManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusAgentManagerProxyPrivate *priv;
};

struct _NMDBusAgentManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_agent_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusAgentManagerProxy, g_object_unref)
#endif

void nmdbus_agent_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusAgentManager *nmdbus_agent_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusAgentManager *nmdbus_agent_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_agent_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusAgentManager *nmdbus_agent_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusAgentManager *nmdbus_agent_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_AGENT_MANAGER_SKELETON (nmdbus_agent_manager_skeleton_get_type ())
#define NMDBUS_AGENT_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_AGENT_MANAGER_SKELETON, NMDBusAgentManagerSkeleton))
#define NMDBUS_AGENT_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_AGENT_MANAGER_SKELETON, NMDBusAgentManagerSkeletonClass))
#define NMDBUS_AGENT_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_AGENT_MANAGER_SKELETON, NMDBusAgentManagerSkeletonClass))
#define NMDBUS_IS_AGENT_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_AGENT_MANAGER_SKELETON))
#define NMDBUS_IS_AGENT_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_AGENT_MANAGER_SKELETON))

typedef struct _NMDBusAgentManagerSkeleton NMDBusAgentManagerSkeleton;
typedef struct _NMDBusAgentManagerSkeletonClass NMDBusAgentManagerSkeletonClass;
typedef struct _NMDBusAgentManagerSkeletonPrivate NMDBusAgentManagerSkeletonPrivate;

struct _NMDBusAgentManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusAgentManagerSkeletonPrivate *priv;
};

struct _NMDBusAgentManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_agent_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusAgentManagerSkeleton, g_object_unref)
#endif

NMDBusAgentManager *nmdbus_agent_manager_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_AGENTMANAGER_H__ */
