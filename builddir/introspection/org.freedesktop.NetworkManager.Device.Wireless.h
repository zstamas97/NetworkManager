/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_WIRELESS_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_WIRELESS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.Device.Wireless */

#define NMDBUS_TYPE_DEVICE_WIFI (nmdbus_device_wifi_get_type ())
#define NMDBUS_DEVICE_WIFI(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_WIFI, NMDBusDeviceWifi))
#define NMDBUS_IS_DEVICE_WIFI(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_WIFI))
#define NMDBUS_DEVICE_WIFI_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_DEVICE_WIFI, NMDBusDeviceWifiIface))

struct _NMDBusDeviceWifi;
typedef struct _NMDBusDeviceWifi NMDBusDeviceWifi;
typedef struct _NMDBusDeviceWifiIface NMDBusDeviceWifiIface;

struct _NMDBusDeviceWifiIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_get_access_points) (
    NMDBusDeviceWifi *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_all_access_points) (
    NMDBusDeviceWifi *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_request_scan) (
    NMDBusDeviceWifi *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_options);

  const gchar *const * (*get_access_points) (NMDBusDeviceWifi *object);

  const gchar * (*get_active_access_point) (NMDBusDeviceWifi *object);

  guint  (*get_bitrate) (NMDBusDeviceWifi *object);

  const gchar * (*get_hw_address) (NMDBusDeviceWifi *object);

  gint64  (*get_last_scan) (NMDBusDeviceWifi *object);

  guint  (*get_mode) (NMDBusDeviceWifi *object);

  const gchar * (*get_perm_hw_address) (NMDBusDeviceWifi *object);

  guint  (*get_wireless_capabilities) (NMDBusDeviceWifi *object);

  void (*access_point_added) (
    NMDBusDeviceWifi *object,
    const gchar *arg_access_point);

  void (*access_point_removed) (
    NMDBusDeviceWifi *object,
    const gchar *arg_access_point);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceWifi, g_object_unref)
#endif

GType nmdbus_device_wifi_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_device_wifi_interface_info (void);
guint nmdbus_device_wifi_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void nmdbus_device_wifi_complete_get_access_points (
    NMDBusDeviceWifi *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *access_points);

void nmdbus_device_wifi_complete_get_all_access_points (
    NMDBusDeviceWifi *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *access_points);

void nmdbus_device_wifi_complete_request_scan (
    NMDBusDeviceWifi *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void nmdbus_device_wifi_emit_access_point_added (
    NMDBusDeviceWifi *object,
    const gchar *arg_access_point);

void nmdbus_device_wifi_emit_access_point_removed (
    NMDBusDeviceWifi *object,
    const gchar *arg_access_point);



/* D-Bus method calls: */
void nmdbus_device_wifi_call_get_access_points (
    NMDBusDeviceWifi *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_device_wifi_call_get_access_points_finish (
    NMDBusDeviceWifi *proxy,
    gchar ***out_access_points,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_device_wifi_call_get_access_points_sync (
    NMDBusDeviceWifi *proxy,
    gchar ***out_access_points,
    GCancellable *cancellable,
    GError **error);

void nmdbus_device_wifi_call_get_all_access_points (
    NMDBusDeviceWifi *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_device_wifi_call_get_all_access_points_finish (
    NMDBusDeviceWifi *proxy,
    gchar ***out_access_points,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_device_wifi_call_get_all_access_points_sync (
    NMDBusDeviceWifi *proxy,
    gchar ***out_access_points,
    GCancellable *cancellable,
    GError **error);

void nmdbus_device_wifi_call_request_scan (
    NMDBusDeviceWifi *proxy,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_device_wifi_call_request_scan_finish (
    NMDBusDeviceWifi *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_device_wifi_call_request_scan_sync (
    NMDBusDeviceWifi *proxy,
    GVariant *arg_options,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *nmdbus_device_wifi_get_hw_address (NMDBusDeviceWifi *object);
gchar *nmdbus_device_wifi_dup_hw_address (NMDBusDeviceWifi *object);
void nmdbus_device_wifi_set_hw_address (NMDBusDeviceWifi *object, const gchar *value);

const gchar *nmdbus_device_wifi_get_perm_hw_address (NMDBusDeviceWifi *object);
gchar *nmdbus_device_wifi_dup_perm_hw_address (NMDBusDeviceWifi *object);
void nmdbus_device_wifi_set_perm_hw_address (NMDBusDeviceWifi *object, const gchar *value);

guint nmdbus_device_wifi_get_mode (NMDBusDeviceWifi *object);
void nmdbus_device_wifi_set_mode (NMDBusDeviceWifi *object, guint value);

guint nmdbus_device_wifi_get_bitrate (NMDBusDeviceWifi *object);
void nmdbus_device_wifi_set_bitrate (NMDBusDeviceWifi *object, guint value);

const gchar *const *nmdbus_device_wifi_get_access_points (NMDBusDeviceWifi *object);
gchar **nmdbus_device_wifi_dup_access_points (NMDBusDeviceWifi *object);
void nmdbus_device_wifi_set_access_points (NMDBusDeviceWifi *object, const gchar *const *value);

const gchar *nmdbus_device_wifi_get_active_access_point (NMDBusDeviceWifi *object);
gchar *nmdbus_device_wifi_dup_active_access_point (NMDBusDeviceWifi *object);
void nmdbus_device_wifi_set_active_access_point (NMDBusDeviceWifi *object, const gchar *value);

guint nmdbus_device_wifi_get_wireless_capabilities (NMDBusDeviceWifi *object);
void nmdbus_device_wifi_set_wireless_capabilities (NMDBusDeviceWifi *object, guint value);

gint64 nmdbus_device_wifi_get_last_scan (NMDBusDeviceWifi *object);
void nmdbus_device_wifi_set_last_scan (NMDBusDeviceWifi *object, gint64 value);


/* ---- */

#define NMDBUS_TYPE_DEVICE_WIFI_PROXY (nmdbus_device_wifi_proxy_get_type ())
#define NMDBUS_DEVICE_WIFI_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_WIFI_PROXY, NMDBusDeviceWifiProxy))
#define NMDBUS_DEVICE_WIFI_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_WIFI_PROXY, NMDBusDeviceWifiProxyClass))
#define NMDBUS_DEVICE_WIFI_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_WIFI_PROXY, NMDBusDeviceWifiProxyClass))
#define NMDBUS_IS_DEVICE_WIFI_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_WIFI_PROXY))
#define NMDBUS_IS_DEVICE_WIFI_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_WIFI_PROXY))

typedef struct _NMDBusDeviceWifiProxy NMDBusDeviceWifiProxy;
typedef struct _NMDBusDeviceWifiProxyClass NMDBusDeviceWifiProxyClass;
typedef struct _NMDBusDeviceWifiProxyPrivate NMDBusDeviceWifiProxyPrivate;

struct _NMDBusDeviceWifiProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusDeviceWifiProxyPrivate *priv;
};

struct _NMDBusDeviceWifiProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_device_wifi_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceWifiProxy, g_object_unref)
#endif

void nmdbus_device_wifi_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceWifi *nmdbus_device_wifi_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceWifi *nmdbus_device_wifi_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_device_wifi_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceWifi *nmdbus_device_wifi_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceWifi *nmdbus_device_wifi_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_DEVICE_WIFI_SKELETON (nmdbus_device_wifi_skeleton_get_type ())
#define NMDBUS_DEVICE_WIFI_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_WIFI_SKELETON, NMDBusDeviceWifiSkeleton))
#define NMDBUS_DEVICE_WIFI_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_WIFI_SKELETON, NMDBusDeviceWifiSkeletonClass))
#define NMDBUS_DEVICE_WIFI_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_WIFI_SKELETON, NMDBusDeviceWifiSkeletonClass))
#define NMDBUS_IS_DEVICE_WIFI_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_WIFI_SKELETON))
#define NMDBUS_IS_DEVICE_WIFI_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_WIFI_SKELETON))

typedef struct _NMDBusDeviceWifiSkeleton NMDBusDeviceWifiSkeleton;
typedef struct _NMDBusDeviceWifiSkeletonClass NMDBusDeviceWifiSkeletonClass;
typedef struct _NMDBusDeviceWifiSkeletonPrivate NMDBusDeviceWifiSkeletonPrivate;

struct _NMDBusDeviceWifiSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusDeviceWifiSkeletonPrivate *priv;
};

struct _NMDBusDeviceWifiSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_device_wifi_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceWifiSkeleton, g_object_unref)
#endif

NMDBusDeviceWifi *nmdbus_device_wifi_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_WIRELESS_H__ */
