/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_WIFIP2PPEER_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_WIFIP2PPEER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.WifiP2PPeer */

#define NMDBUS_TYPE_WIFI_P2P_PEER (nmdbus_wifi_p2p_peer_get_type ())
#define NMDBUS_WIFI_P2P_PEER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_WIFI_P2P_PEER, NMDBusWifiP2PPeer))
#define NMDBUS_IS_WIFI_P2P_PEER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_WIFI_P2P_PEER))
#define NMDBUS_WIFI_P2P_PEER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_WIFI_P2P_PEER, NMDBusWifiP2PPeerIface))

struct _NMDBusWifiP2PPeer;
typedef struct _NMDBusWifiP2PPeer NMDBusWifiP2PPeer;
typedef struct _NMDBusWifiP2PPeerIface NMDBusWifiP2PPeerIface;

struct _NMDBusWifiP2PPeerIface
{
  GTypeInterface parent_iface;

  guint  (*get_flags) (NMDBusWifiP2PPeer *object);

  const gchar * (*get_hw_address) (NMDBusWifiP2PPeer *object);

  gint  (*get_last_seen) (NMDBusWifiP2PPeer *object);

  const gchar * (*get_manufacturer) (NMDBusWifiP2PPeer *object);

  const gchar * (*get_model) (NMDBusWifiP2PPeer *object);

  const gchar * (*get_model_number) (NMDBusWifiP2PPeer *object);

  const gchar * (*get_name) (NMDBusWifiP2PPeer *object);

  const gchar * (*get_serial) (NMDBusWifiP2PPeer *object);

  guchar  (*get_strength) (NMDBusWifiP2PPeer *object);

  const gchar * (*get_wfd_ies) (NMDBusWifiP2PPeer *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusWifiP2PPeer, g_object_unref)
#endif

GType nmdbus_wifi_p2p_peer_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_wifi_p2p_peer_interface_info (void);
guint nmdbus_wifi_p2p_peer_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
const gchar *nmdbus_wifi_p2p_peer_get_name (NMDBusWifiP2PPeer *object);
gchar *nmdbus_wifi_p2p_peer_dup_name (NMDBusWifiP2PPeer *object);
void nmdbus_wifi_p2p_peer_set_name (NMDBusWifiP2PPeer *object, const gchar *value);

guint nmdbus_wifi_p2p_peer_get_flags (NMDBusWifiP2PPeer *object);
void nmdbus_wifi_p2p_peer_set_flags (NMDBusWifiP2PPeer *object, guint value);

const gchar *nmdbus_wifi_p2p_peer_get_manufacturer (NMDBusWifiP2PPeer *object);
gchar *nmdbus_wifi_p2p_peer_dup_manufacturer (NMDBusWifiP2PPeer *object);
void nmdbus_wifi_p2p_peer_set_manufacturer (NMDBusWifiP2PPeer *object, const gchar *value);

const gchar *nmdbus_wifi_p2p_peer_get_model (NMDBusWifiP2PPeer *object);
gchar *nmdbus_wifi_p2p_peer_dup_model (NMDBusWifiP2PPeer *object);
void nmdbus_wifi_p2p_peer_set_model (NMDBusWifiP2PPeer *object, const gchar *value);

const gchar *nmdbus_wifi_p2p_peer_get_model_number (NMDBusWifiP2PPeer *object);
gchar *nmdbus_wifi_p2p_peer_dup_model_number (NMDBusWifiP2PPeer *object);
void nmdbus_wifi_p2p_peer_set_model_number (NMDBusWifiP2PPeer *object, const gchar *value);

const gchar *nmdbus_wifi_p2p_peer_get_serial (NMDBusWifiP2PPeer *object);
gchar *nmdbus_wifi_p2p_peer_dup_serial (NMDBusWifiP2PPeer *object);
void nmdbus_wifi_p2p_peer_set_serial (NMDBusWifiP2PPeer *object, const gchar *value);

const gchar *nmdbus_wifi_p2p_peer_get_wfd_ies (NMDBusWifiP2PPeer *object);
gchar *nmdbus_wifi_p2p_peer_dup_wfd_ies (NMDBusWifiP2PPeer *object);
void nmdbus_wifi_p2p_peer_set_wfd_ies (NMDBusWifiP2PPeer *object, const gchar *value);

const gchar *nmdbus_wifi_p2p_peer_get_hw_address (NMDBusWifiP2PPeer *object);
gchar *nmdbus_wifi_p2p_peer_dup_hw_address (NMDBusWifiP2PPeer *object);
void nmdbus_wifi_p2p_peer_set_hw_address (NMDBusWifiP2PPeer *object, const gchar *value);

guchar nmdbus_wifi_p2p_peer_get_strength (NMDBusWifiP2PPeer *object);
void nmdbus_wifi_p2p_peer_set_strength (NMDBusWifiP2PPeer *object, guchar value);

gint nmdbus_wifi_p2p_peer_get_last_seen (NMDBusWifiP2PPeer *object);
void nmdbus_wifi_p2p_peer_set_last_seen (NMDBusWifiP2PPeer *object, gint value);


/* ---- */

#define NMDBUS_TYPE_WIFI_P2P_PEER_PROXY (nmdbus_wifi_p2p_peer_proxy_get_type ())
#define NMDBUS_WIFI_P2P_PEER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_WIFI_P2P_PEER_PROXY, NMDBusWifiP2PPeerProxy))
#define NMDBUS_WIFI_P2P_PEER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_WIFI_P2P_PEER_PROXY, NMDBusWifiP2PPeerProxyClass))
#define NMDBUS_WIFI_P2P_PEER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_WIFI_P2P_PEER_PROXY, NMDBusWifiP2PPeerProxyClass))
#define NMDBUS_IS_WIFI_P2P_PEER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_WIFI_P2P_PEER_PROXY))
#define NMDBUS_IS_WIFI_P2P_PEER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_WIFI_P2P_PEER_PROXY))

typedef struct _NMDBusWifiP2PPeerProxy NMDBusWifiP2PPeerProxy;
typedef struct _NMDBusWifiP2PPeerProxyClass NMDBusWifiP2PPeerProxyClass;
typedef struct _NMDBusWifiP2PPeerProxyPrivate NMDBusWifiP2PPeerProxyPrivate;

struct _NMDBusWifiP2PPeerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusWifiP2PPeerProxyPrivate *priv;
};

struct _NMDBusWifiP2PPeerProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_wifi_p2p_peer_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusWifiP2PPeerProxy, g_object_unref)
#endif

void nmdbus_wifi_p2p_peer_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusWifiP2PPeer *nmdbus_wifi_p2p_peer_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusWifiP2PPeer *nmdbus_wifi_p2p_peer_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_wifi_p2p_peer_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusWifiP2PPeer *nmdbus_wifi_p2p_peer_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusWifiP2PPeer *nmdbus_wifi_p2p_peer_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_WIFI_P2P_PEER_SKELETON (nmdbus_wifi_p2p_peer_skeleton_get_type ())
#define NMDBUS_WIFI_P2P_PEER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_WIFI_P2P_PEER_SKELETON, NMDBusWifiP2PPeerSkeleton))
#define NMDBUS_WIFI_P2P_PEER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_WIFI_P2P_PEER_SKELETON, NMDBusWifiP2PPeerSkeletonClass))
#define NMDBUS_WIFI_P2P_PEER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_WIFI_P2P_PEER_SKELETON, NMDBusWifiP2PPeerSkeletonClass))
#define NMDBUS_IS_WIFI_P2P_PEER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_WIFI_P2P_PEER_SKELETON))
#define NMDBUS_IS_WIFI_P2P_PEER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_WIFI_P2P_PEER_SKELETON))

typedef struct _NMDBusWifiP2PPeerSkeleton NMDBusWifiP2PPeerSkeleton;
typedef struct _NMDBusWifiP2PPeerSkeletonClass NMDBusWifiP2PPeerSkeletonClass;
typedef struct _NMDBusWifiP2PPeerSkeletonPrivate NMDBusWifiP2PPeerSkeletonPrivate;

struct _NMDBusWifiP2PPeerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusWifiP2PPeerSkeletonPrivate *priv;
};

struct _NMDBusWifiP2PPeerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_wifi_p2p_peer_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusWifiP2PPeerSkeleton, g_object_unref)
#endif

NMDBusWifiP2PPeer *nmdbus_wifi_p2p_peer_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_WIFIP2PPEER_H__ */
