/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_SECRETAGENT_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_SECRETAGENT_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.SecretAgent */

#define NMDBUS_TYPE_SECRET_AGENT (nmdbus_secret_agent_get_type ())
#define NMDBUS_SECRET_AGENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_SECRET_AGENT, NMDBusSecretAgent))
#define NMDBUS_IS_SECRET_AGENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_SECRET_AGENT))
#define NMDBUS_SECRET_AGENT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_SECRET_AGENT, NMDBusSecretAgentIface))

struct _NMDBusSecretAgent;
typedef struct _NMDBusSecretAgent NMDBusSecretAgent;
typedef struct _NMDBusSecretAgentIface NMDBusSecretAgentIface;

struct _NMDBusSecretAgentIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_cancel_get_secrets) (
    NMDBusSecretAgent *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_connection_path,
    const gchar *arg_setting_name);

  gboolean (*handle_delete_secrets) (
    NMDBusSecretAgent *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_connection,
    const gchar *arg_connection_path);

  gboolean (*handle_get_secrets) (
    NMDBusSecretAgent *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_connection,
    const gchar *arg_connection_path,
    const gchar *arg_setting_name,
    const gchar *const *arg_hints,
    guint arg_flags);

  gboolean (*handle_save_secrets) (
    NMDBusSecretAgent *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_connection,
    const gchar *arg_connection_path);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusSecretAgent, g_object_unref)
#endif

GType nmdbus_secret_agent_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_secret_agent_interface_info (void);
guint nmdbus_secret_agent_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void nmdbus_secret_agent_complete_get_secrets (
    NMDBusSecretAgent *object,
    GDBusMethodInvocation *invocation,
    GVariant *secrets);

void nmdbus_secret_agent_complete_cancel_get_secrets (
    NMDBusSecretAgent *object,
    GDBusMethodInvocation *invocation);

void nmdbus_secret_agent_complete_save_secrets (
    NMDBusSecretAgent *object,
    GDBusMethodInvocation *invocation);

void nmdbus_secret_agent_complete_delete_secrets (
    NMDBusSecretAgent *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void nmdbus_secret_agent_call_get_secrets (
    NMDBusSecretAgent *proxy,
    GVariant *arg_connection,
    const gchar *arg_connection_path,
    const gchar *arg_setting_name,
    const gchar *const *arg_hints,
    guint arg_flags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_secret_agent_call_get_secrets_finish (
    NMDBusSecretAgent *proxy,
    GVariant **out_secrets,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_secret_agent_call_get_secrets_sync (
    NMDBusSecretAgent *proxy,
    GVariant *arg_connection,
    const gchar *arg_connection_path,
    const gchar *arg_setting_name,
    const gchar *const *arg_hints,
    guint arg_flags,
    GVariant **out_secrets,
    GCancellable *cancellable,
    GError **error);

void nmdbus_secret_agent_call_cancel_get_secrets (
    NMDBusSecretAgent *proxy,
    const gchar *arg_connection_path,
    const gchar *arg_setting_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_secret_agent_call_cancel_get_secrets_finish (
    NMDBusSecretAgent *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_secret_agent_call_cancel_get_secrets_sync (
    NMDBusSecretAgent *proxy,
    const gchar *arg_connection_path,
    const gchar *arg_setting_name,
    GCancellable *cancellable,
    GError **error);

void nmdbus_secret_agent_call_save_secrets (
    NMDBusSecretAgent *proxy,
    GVariant *arg_connection,
    const gchar *arg_connection_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_secret_agent_call_save_secrets_finish (
    NMDBusSecretAgent *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_secret_agent_call_save_secrets_sync (
    NMDBusSecretAgent *proxy,
    GVariant *arg_connection,
    const gchar *arg_connection_path,
    GCancellable *cancellable,
    GError **error);

void nmdbus_secret_agent_call_delete_secrets (
    NMDBusSecretAgent *proxy,
    GVariant *arg_connection,
    const gchar *arg_connection_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_secret_agent_call_delete_secrets_finish (
    NMDBusSecretAgent *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_secret_agent_call_delete_secrets_sync (
    NMDBusSecretAgent *proxy,
    GVariant *arg_connection,
    const gchar *arg_connection_path,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define NMDBUS_TYPE_SECRET_AGENT_PROXY (nmdbus_secret_agent_proxy_get_type ())
#define NMDBUS_SECRET_AGENT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_SECRET_AGENT_PROXY, NMDBusSecretAgentProxy))
#define NMDBUS_SECRET_AGENT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_SECRET_AGENT_PROXY, NMDBusSecretAgentProxyClass))
#define NMDBUS_SECRET_AGENT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_SECRET_AGENT_PROXY, NMDBusSecretAgentProxyClass))
#define NMDBUS_IS_SECRET_AGENT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_SECRET_AGENT_PROXY))
#define NMDBUS_IS_SECRET_AGENT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_SECRET_AGENT_PROXY))

typedef struct _NMDBusSecretAgentProxy NMDBusSecretAgentProxy;
typedef struct _NMDBusSecretAgentProxyClass NMDBusSecretAgentProxyClass;
typedef struct _NMDBusSecretAgentProxyPrivate NMDBusSecretAgentProxyPrivate;

struct _NMDBusSecretAgentProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusSecretAgentProxyPrivate *priv;
};

struct _NMDBusSecretAgentProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_secret_agent_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusSecretAgentProxy, g_object_unref)
#endif

void nmdbus_secret_agent_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusSecretAgent *nmdbus_secret_agent_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusSecretAgent *nmdbus_secret_agent_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_secret_agent_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusSecretAgent *nmdbus_secret_agent_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusSecretAgent *nmdbus_secret_agent_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_SECRET_AGENT_SKELETON (nmdbus_secret_agent_skeleton_get_type ())
#define NMDBUS_SECRET_AGENT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_SECRET_AGENT_SKELETON, NMDBusSecretAgentSkeleton))
#define NMDBUS_SECRET_AGENT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_SECRET_AGENT_SKELETON, NMDBusSecretAgentSkeletonClass))
#define NMDBUS_SECRET_AGENT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_SECRET_AGENT_SKELETON, NMDBusSecretAgentSkeletonClass))
#define NMDBUS_IS_SECRET_AGENT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_SECRET_AGENT_SKELETON))
#define NMDBUS_IS_SECRET_AGENT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_SECRET_AGENT_SKELETON))

typedef struct _NMDBusSecretAgentSkeleton NMDBusSecretAgentSkeleton;
typedef struct _NMDBusSecretAgentSkeletonClass NMDBusSecretAgentSkeletonClass;
typedef struct _NMDBusSecretAgentSkeletonPrivate NMDBusSecretAgentSkeletonPrivate;

struct _NMDBusSecretAgentSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusSecretAgentSkeletonPrivate *priv;
};

struct _NMDBusSecretAgentSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_secret_agent_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusSecretAgentSkeleton, g_object_unref)
#endif

NMDBusSecretAgent *nmdbus_secret_agent_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_SECRETAGENT_H__ */
