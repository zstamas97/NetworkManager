/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_OLPCMESH_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_OLPCMESH_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.Device.OlpcMesh */

#define NMDBUS_TYPE_DEVICE_OLPC_MESH (nmdbus_device_olpc_mesh_get_type ())
#define NMDBUS_DEVICE_OLPC_MESH(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_OLPC_MESH, NMDBusDeviceOlpcMesh))
#define NMDBUS_IS_DEVICE_OLPC_MESH(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_OLPC_MESH))
#define NMDBUS_DEVICE_OLPC_MESH_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_DEVICE_OLPC_MESH, NMDBusDeviceOlpcMeshIface))

struct _NMDBusDeviceOlpcMesh;
typedef struct _NMDBusDeviceOlpcMesh NMDBusDeviceOlpcMesh;
typedef struct _NMDBusDeviceOlpcMeshIface NMDBusDeviceOlpcMeshIface;

struct _NMDBusDeviceOlpcMeshIface
{
  GTypeInterface parent_iface;

  guint  (*get_active_channel) (NMDBusDeviceOlpcMesh *object);

  const gchar * (*get_companion) (NMDBusDeviceOlpcMesh *object);

  const gchar * (*get_hw_address) (NMDBusDeviceOlpcMesh *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceOlpcMesh, g_object_unref)
#endif

GType nmdbus_device_olpc_mesh_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_device_olpc_mesh_interface_info (void);
guint nmdbus_device_olpc_mesh_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
const gchar *nmdbus_device_olpc_mesh_get_hw_address (NMDBusDeviceOlpcMesh *object);
gchar *nmdbus_device_olpc_mesh_dup_hw_address (NMDBusDeviceOlpcMesh *object);
void nmdbus_device_olpc_mesh_set_hw_address (NMDBusDeviceOlpcMesh *object, const gchar *value);

const gchar *nmdbus_device_olpc_mesh_get_companion (NMDBusDeviceOlpcMesh *object);
gchar *nmdbus_device_olpc_mesh_dup_companion (NMDBusDeviceOlpcMesh *object);
void nmdbus_device_olpc_mesh_set_companion (NMDBusDeviceOlpcMesh *object, const gchar *value);

guint nmdbus_device_olpc_mesh_get_active_channel (NMDBusDeviceOlpcMesh *object);
void nmdbus_device_olpc_mesh_set_active_channel (NMDBusDeviceOlpcMesh *object, guint value);


/* ---- */

#define NMDBUS_TYPE_DEVICE_OLPC_MESH_PROXY (nmdbus_device_olpc_mesh_proxy_get_type ())
#define NMDBUS_DEVICE_OLPC_MESH_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_OLPC_MESH_PROXY, NMDBusDeviceOlpcMeshProxy))
#define NMDBUS_DEVICE_OLPC_MESH_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_OLPC_MESH_PROXY, NMDBusDeviceOlpcMeshProxyClass))
#define NMDBUS_DEVICE_OLPC_MESH_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_OLPC_MESH_PROXY, NMDBusDeviceOlpcMeshProxyClass))
#define NMDBUS_IS_DEVICE_OLPC_MESH_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_OLPC_MESH_PROXY))
#define NMDBUS_IS_DEVICE_OLPC_MESH_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_OLPC_MESH_PROXY))

typedef struct _NMDBusDeviceOlpcMeshProxy NMDBusDeviceOlpcMeshProxy;
typedef struct _NMDBusDeviceOlpcMeshProxyClass NMDBusDeviceOlpcMeshProxyClass;
typedef struct _NMDBusDeviceOlpcMeshProxyPrivate NMDBusDeviceOlpcMeshProxyPrivate;

struct _NMDBusDeviceOlpcMeshProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusDeviceOlpcMeshProxyPrivate *priv;
};

struct _NMDBusDeviceOlpcMeshProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_device_olpc_mesh_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceOlpcMeshProxy, g_object_unref)
#endif

void nmdbus_device_olpc_mesh_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceOlpcMesh *nmdbus_device_olpc_mesh_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceOlpcMesh *nmdbus_device_olpc_mesh_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_device_olpc_mesh_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceOlpcMesh *nmdbus_device_olpc_mesh_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceOlpcMesh *nmdbus_device_olpc_mesh_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_DEVICE_OLPC_MESH_SKELETON (nmdbus_device_olpc_mesh_skeleton_get_type ())
#define NMDBUS_DEVICE_OLPC_MESH_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_OLPC_MESH_SKELETON, NMDBusDeviceOlpcMeshSkeleton))
#define NMDBUS_DEVICE_OLPC_MESH_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_OLPC_MESH_SKELETON, NMDBusDeviceOlpcMeshSkeletonClass))
#define NMDBUS_DEVICE_OLPC_MESH_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_OLPC_MESH_SKELETON, NMDBusDeviceOlpcMeshSkeletonClass))
#define NMDBUS_IS_DEVICE_OLPC_MESH_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_OLPC_MESH_SKELETON))
#define NMDBUS_IS_DEVICE_OLPC_MESH_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_OLPC_MESH_SKELETON))

typedef struct _NMDBusDeviceOlpcMeshSkeleton NMDBusDeviceOlpcMeshSkeleton;
typedef struct _NMDBusDeviceOlpcMeshSkeletonClass NMDBusDeviceOlpcMeshSkeletonClass;
typedef struct _NMDBusDeviceOlpcMeshSkeletonPrivate NMDBusDeviceOlpcMeshSkeletonPrivate;

struct _NMDBusDeviceOlpcMeshSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusDeviceOlpcMeshSkeletonPrivate *priv;
};

struct _NMDBusDeviceOlpcMeshSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_device_olpc_mesh_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceOlpcMeshSkeleton, g_object_unref)
#endif

NMDBusDeviceOlpcMesh *nmdbus_device_olpc_mesh_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_OLPCMESH_H__ */
