/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_ACCESSPOINT_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_ACCESSPOINT_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.AccessPoint */

#define NMDBUS_TYPE_ACCESS_POINT (nmdbus_access_point_get_type ())
#define NMDBUS_ACCESS_POINT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_ACCESS_POINT, NMDBusAccessPoint))
#define NMDBUS_IS_ACCESS_POINT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_ACCESS_POINT))
#define NMDBUS_ACCESS_POINT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_ACCESS_POINT, NMDBusAccessPointIface))

struct _NMDBusAccessPoint;
typedef struct _NMDBusAccessPoint NMDBusAccessPoint;
typedef struct _NMDBusAccessPointIface NMDBusAccessPointIface;

struct _NMDBusAccessPointIface
{
  GTypeInterface parent_iface;

  guint  (*get_flags) (NMDBusAccessPoint *object);

  guint  (*get_frequency) (NMDBusAccessPoint *object);

  const gchar * (*get_hw_address) (NMDBusAccessPoint *object);

  gint  (*get_last_seen) (NMDBusAccessPoint *object);

  guint  (*get_max_bitrate) (NMDBusAccessPoint *object);

  guint  (*get_mode) (NMDBusAccessPoint *object);

  guint  (*get_rsn_flags) (NMDBusAccessPoint *object);

  GVariant * (*get_ssid) (NMDBusAccessPoint *object);

  guchar  (*get_strength) (NMDBusAccessPoint *object);

  guint  (*get_wpa_flags) (NMDBusAccessPoint *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusAccessPoint, g_object_unref)
#endif

GType nmdbus_access_point_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_access_point_interface_info (void);
guint nmdbus_access_point_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
guint nmdbus_access_point_get_flags (NMDBusAccessPoint *object);
void nmdbus_access_point_set_flags (NMDBusAccessPoint *object, guint value);

guint nmdbus_access_point_get_wpa_flags (NMDBusAccessPoint *object);
void nmdbus_access_point_set_wpa_flags (NMDBusAccessPoint *object, guint value);

guint nmdbus_access_point_get_rsn_flags (NMDBusAccessPoint *object);
void nmdbus_access_point_set_rsn_flags (NMDBusAccessPoint *object, guint value);

GVariant *nmdbus_access_point_get_ssid (NMDBusAccessPoint *object);
GVariant *nmdbus_access_point_dup_ssid (NMDBusAccessPoint *object);
void nmdbus_access_point_set_ssid (NMDBusAccessPoint *object, GVariant *value);

guint nmdbus_access_point_get_frequency (NMDBusAccessPoint *object);
void nmdbus_access_point_set_frequency (NMDBusAccessPoint *object, guint value);

const gchar *nmdbus_access_point_get_hw_address (NMDBusAccessPoint *object);
gchar *nmdbus_access_point_dup_hw_address (NMDBusAccessPoint *object);
void nmdbus_access_point_set_hw_address (NMDBusAccessPoint *object, const gchar *value);

guint nmdbus_access_point_get_mode (NMDBusAccessPoint *object);
void nmdbus_access_point_set_mode (NMDBusAccessPoint *object, guint value);

guint nmdbus_access_point_get_max_bitrate (NMDBusAccessPoint *object);
void nmdbus_access_point_set_max_bitrate (NMDBusAccessPoint *object, guint value);

guchar nmdbus_access_point_get_strength (NMDBusAccessPoint *object);
void nmdbus_access_point_set_strength (NMDBusAccessPoint *object, guchar value);

gint nmdbus_access_point_get_last_seen (NMDBusAccessPoint *object);
void nmdbus_access_point_set_last_seen (NMDBusAccessPoint *object, gint value);


/* ---- */

#define NMDBUS_TYPE_ACCESS_POINT_PROXY (nmdbus_access_point_proxy_get_type ())
#define NMDBUS_ACCESS_POINT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_ACCESS_POINT_PROXY, NMDBusAccessPointProxy))
#define NMDBUS_ACCESS_POINT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_ACCESS_POINT_PROXY, NMDBusAccessPointProxyClass))
#define NMDBUS_ACCESS_POINT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_ACCESS_POINT_PROXY, NMDBusAccessPointProxyClass))
#define NMDBUS_IS_ACCESS_POINT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_ACCESS_POINT_PROXY))
#define NMDBUS_IS_ACCESS_POINT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_ACCESS_POINT_PROXY))

typedef struct _NMDBusAccessPointProxy NMDBusAccessPointProxy;
typedef struct _NMDBusAccessPointProxyClass NMDBusAccessPointProxyClass;
typedef struct _NMDBusAccessPointProxyPrivate NMDBusAccessPointProxyPrivate;

struct _NMDBusAccessPointProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusAccessPointProxyPrivate *priv;
};

struct _NMDBusAccessPointProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_access_point_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusAccessPointProxy, g_object_unref)
#endif

void nmdbus_access_point_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusAccessPoint *nmdbus_access_point_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusAccessPoint *nmdbus_access_point_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_access_point_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusAccessPoint *nmdbus_access_point_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusAccessPoint *nmdbus_access_point_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_ACCESS_POINT_SKELETON (nmdbus_access_point_skeleton_get_type ())
#define NMDBUS_ACCESS_POINT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_ACCESS_POINT_SKELETON, NMDBusAccessPointSkeleton))
#define NMDBUS_ACCESS_POINT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_ACCESS_POINT_SKELETON, NMDBusAccessPointSkeletonClass))
#define NMDBUS_ACCESS_POINT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_ACCESS_POINT_SKELETON, NMDBusAccessPointSkeletonClass))
#define NMDBUS_IS_ACCESS_POINT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_ACCESS_POINT_SKELETON))
#define NMDBUS_IS_ACCESS_POINT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_ACCESS_POINT_SKELETON))

typedef struct _NMDBusAccessPointSkeleton NMDBusAccessPointSkeleton;
typedef struct _NMDBusAccessPointSkeletonClass NMDBusAccessPointSkeletonClass;
typedef struct _NMDBusAccessPointSkeletonPrivate NMDBusAccessPointSkeletonPrivate;

struct _NMDBusAccessPointSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusAccessPointSkeletonPrivate *priv;
};

struct _NMDBusAccessPointSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_access_point_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusAccessPointSkeleton, g_object_unref)
#endif

NMDBusAccessPoint *nmdbus_access_point_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_ACCESSPOINT_H__ */
