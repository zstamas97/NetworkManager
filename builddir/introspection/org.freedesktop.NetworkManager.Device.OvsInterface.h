/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_OVSINTERFACE_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_OVSINTERFACE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.Device.OvsInterface */

#define NMDBUS_TYPE_DEVICE_OVS_INTERFACE (nmdbus_device_ovs_interface_get_type ())
#define NMDBUS_DEVICE_OVS_INTERFACE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_OVS_INTERFACE, NMDBusDeviceOvsInterface))
#define NMDBUS_IS_DEVICE_OVS_INTERFACE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_OVS_INTERFACE))
#define NMDBUS_DEVICE_OVS_INTERFACE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_DEVICE_OVS_INTERFACE, NMDBusDeviceOvsInterfaceIface))

struct _NMDBusDeviceOvsInterface;
typedef struct _NMDBusDeviceOvsInterface NMDBusDeviceOvsInterface;
typedef struct _NMDBusDeviceOvsInterfaceIface NMDBusDeviceOvsInterfaceIface;

struct _NMDBusDeviceOvsInterfaceIface
{
  GTypeInterface parent_iface;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceOvsInterface, g_object_unref)
#endif

GType nmdbus_device_ovs_interface_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_device_ovs_interface_interface_info (void);
guint nmdbus_device_ovs_interface_override_properties (GObjectClass *klass, guint property_id_begin);


/* ---- */

#define NMDBUS_TYPE_DEVICE_OVS_INTERFACE_PROXY (nmdbus_device_ovs_interface_proxy_get_type ())
#define NMDBUS_DEVICE_OVS_INTERFACE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_OVS_INTERFACE_PROXY, NMDBusDeviceOvsInterfaceProxy))
#define NMDBUS_DEVICE_OVS_INTERFACE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_OVS_INTERFACE_PROXY, NMDBusDeviceOvsInterfaceProxyClass))
#define NMDBUS_DEVICE_OVS_INTERFACE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_OVS_INTERFACE_PROXY, NMDBusDeviceOvsInterfaceProxyClass))
#define NMDBUS_IS_DEVICE_OVS_INTERFACE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_OVS_INTERFACE_PROXY))
#define NMDBUS_IS_DEVICE_OVS_INTERFACE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_OVS_INTERFACE_PROXY))

typedef struct _NMDBusDeviceOvsInterfaceProxy NMDBusDeviceOvsInterfaceProxy;
typedef struct _NMDBusDeviceOvsInterfaceProxyClass NMDBusDeviceOvsInterfaceProxyClass;
typedef struct _NMDBusDeviceOvsInterfaceProxyPrivate NMDBusDeviceOvsInterfaceProxyPrivate;

struct _NMDBusDeviceOvsInterfaceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusDeviceOvsInterfaceProxyPrivate *priv;
};

struct _NMDBusDeviceOvsInterfaceProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_device_ovs_interface_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceOvsInterfaceProxy, g_object_unref)
#endif

void nmdbus_device_ovs_interface_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceOvsInterface *nmdbus_device_ovs_interface_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceOvsInterface *nmdbus_device_ovs_interface_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_device_ovs_interface_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceOvsInterface *nmdbus_device_ovs_interface_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceOvsInterface *nmdbus_device_ovs_interface_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_DEVICE_OVS_INTERFACE_SKELETON (nmdbus_device_ovs_interface_skeleton_get_type ())
#define NMDBUS_DEVICE_OVS_INTERFACE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_OVS_INTERFACE_SKELETON, NMDBusDeviceOvsInterfaceSkeleton))
#define NMDBUS_DEVICE_OVS_INTERFACE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_OVS_INTERFACE_SKELETON, NMDBusDeviceOvsInterfaceSkeletonClass))
#define NMDBUS_DEVICE_OVS_INTERFACE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_OVS_INTERFACE_SKELETON, NMDBusDeviceOvsInterfaceSkeletonClass))
#define NMDBUS_IS_DEVICE_OVS_INTERFACE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_OVS_INTERFACE_SKELETON))
#define NMDBUS_IS_DEVICE_OVS_INTERFACE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_OVS_INTERFACE_SKELETON))

typedef struct _NMDBusDeviceOvsInterfaceSkeleton NMDBusDeviceOvsInterfaceSkeleton;
typedef struct _NMDBusDeviceOvsInterfaceSkeletonClass NMDBusDeviceOvsInterfaceSkeletonClass;
typedef struct _NMDBusDeviceOvsInterfaceSkeletonPrivate NMDBusDeviceOvsInterfaceSkeletonPrivate;

struct _NMDBusDeviceOvsInterfaceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusDeviceOvsInterfaceSkeletonPrivate *priv;
};

struct _NMDBusDeviceOvsInterfaceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_device_ovs_interface_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceOvsInterfaceSkeleton, g_object_unref)
#endif

NMDBusDeviceOvsInterface *nmdbus_device_ovs_interface_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_OVSINTERFACE_H__ */
