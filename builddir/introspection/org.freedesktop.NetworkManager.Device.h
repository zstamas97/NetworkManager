/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.Device */

#define NMDBUS_TYPE_DEVICE (nmdbus_device_get_type ())
#define NMDBUS_DEVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE, NMDBusDevice))
#define NMDBUS_IS_DEVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE))
#define NMDBUS_DEVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_DEVICE, NMDBusDeviceIface))

struct _NMDBusDevice;
typedef struct _NMDBusDevice NMDBusDevice;
typedef struct _NMDBusDeviceIface NMDBusDeviceIface;

struct _NMDBusDeviceIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_delete) (
    NMDBusDevice *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_disconnect) (
    NMDBusDevice *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_applied_connection) (
    NMDBusDevice *object,
    GDBusMethodInvocation *invocation,
    guint arg_flags);

  gboolean (*handle_reapply) (
    NMDBusDevice *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_connection,
    guint64 arg_version_id,
    guint arg_flags);

  const gchar * (*get_active_connection) (NMDBusDevice *object);

  gboolean  (*get_autoconnect) (NMDBusDevice *object);

  const gchar *const * (*get_available_connections) (NMDBusDevice *object);

  guint  (*get_capabilities) (NMDBusDevice *object);

  guint  (*get_device_type) (NMDBusDevice *object);

  const gchar * (*get_dhcp4_config) (NMDBusDevice *object);

  const gchar * (*get_dhcp6_config) (NMDBusDevice *object);

  const gchar * (*get_driver) (NMDBusDevice *object);

  const gchar * (*get_driver_version) (NMDBusDevice *object);

  gboolean  (*get_firmware_missing) (NMDBusDevice *object);

  const gchar * (*get_firmware_version) (NMDBusDevice *object);

  const gchar * (*get_hw_address) (NMDBusDevice *object);

  const gchar * (*get_interface) (NMDBusDevice *object);

  guint  (*get_interface_flags) (NMDBusDevice *object);

  guint  (*get_ip4_address) (NMDBusDevice *object);

  const gchar * (*get_ip4_config) (NMDBusDevice *object);

  guint  (*get_ip4_connectivity) (NMDBusDevice *object);

  const gchar * (*get_ip6_config) (NMDBusDevice *object);

  guint  (*get_ip6_connectivity) (NMDBusDevice *object);

  const gchar * (*get_ip_interface) (NMDBusDevice *object);

  GVariant * (*get_lldp_neighbors) (NMDBusDevice *object);

  gboolean  (*get_managed) (NMDBusDevice *object);

  guint  (*get_metered) (NMDBusDevice *object);

  guint  (*get_mtu) (NMDBusDevice *object);

  gboolean  (*get_nm_plugin_missing) (NMDBusDevice *object);

  const gchar * (*get_path) (NMDBusDevice *object);

  const gchar * (*get_physical_port_id) (NMDBusDevice *object);

  const gchar *const * (*get_ports) (NMDBusDevice *object);

  gboolean  (*get_real) (NMDBusDevice *object);

  guint  (*get_state) (NMDBusDevice *object);

  GVariant * (*get_state_reason) (NMDBusDevice *object);

  const gchar * (*get_udi) (NMDBusDevice *object);

  void (*state_changed) (
    NMDBusDevice *object,
    guint arg_new_state,
    guint arg_old_state,
    guint arg_reason);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDevice, g_object_unref)
#endif

GType nmdbus_device_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_device_interface_info (void);
guint nmdbus_device_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void nmdbus_device_complete_reapply (
    NMDBusDevice *object,
    GDBusMethodInvocation *invocation);

void nmdbus_device_complete_get_applied_connection (
    NMDBusDevice *object,
    GDBusMethodInvocation *invocation,
    GVariant *connection,
    guint64 version_id);

void nmdbus_device_complete_disconnect (
    NMDBusDevice *object,
    GDBusMethodInvocation *invocation);

void nmdbus_device_complete_delete (
    NMDBusDevice *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void nmdbus_device_emit_state_changed (
    NMDBusDevice *object,
    guint arg_new_state,
    guint arg_old_state,
    guint arg_reason);



/* D-Bus method calls: */
void nmdbus_device_call_reapply (
    NMDBusDevice *proxy,
    GVariant *arg_connection,
    guint64 arg_version_id,
    guint arg_flags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_device_call_reapply_finish (
    NMDBusDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_device_call_reapply_sync (
    NMDBusDevice *proxy,
    GVariant *arg_connection,
    guint64 arg_version_id,
    guint arg_flags,
    GCancellable *cancellable,
    GError **error);

void nmdbus_device_call_get_applied_connection (
    NMDBusDevice *proxy,
    guint arg_flags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_device_call_get_applied_connection_finish (
    NMDBusDevice *proxy,
    GVariant **out_connection,
    guint64 *out_version_id,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_device_call_get_applied_connection_sync (
    NMDBusDevice *proxy,
    guint arg_flags,
    GVariant **out_connection,
    guint64 *out_version_id,
    GCancellable *cancellable,
    GError **error);

void nmdbus_device_call_disconnect (
    NMDBusDevice *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_device_call_disconnect_finish (
    NMDBusDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_device_call_disconnect_sync (
    NMDBusDevice *proxy,
    GCancellable *cancellable,
    GError **error);

void nmdbus_device_call_delete (
    NMDBusDevice *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_device_call_delete_finish (
    NMDBusDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_device_call_delete_sync (
    NMDBusDevice *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *nmdbus_device_get_udi (NMDBusDevice *object);
gchar *nmdbus_device_dup_udi (NMDBusDevice *object);
void nmdbus_device_set_udi (NMDBusDevice *object, const gchar *value);

const gchar *nmdbus_device_get_path (NMDBusDevice *object);
gchar *nmdbus_device_dup_path (NMDBusDevice *object);
void nmdbus_device_set_path (NMDBusDevice *object, const gchar *value);

const gchar *nmdbus_device_get_interface (NMDBusDevice *object);
gchar *nmdbus_device_dup_interface (NMDBusDevice *object);
void nmdbus_device_set_interface (NMDBusDevice *object, const gchar *value);

const gchar *nmdbus_device_get_ip_interface (NMDBusDevice *object);
gchar *nmdbus_device_dup_ip_interface (NMDBusDevice *object);
void nmdbus_device_set_ip_interface (NMDBusDevice *object, const gchar *value);

const gchar *nmdbus_device_get_driver (NMDBusDevice *object);
gchar *nmdbus_device_dup_driver (NMDBusDevice *object);
void nmdbus_device_set_driver (NMDBusDevice *object, const gchar *value);

const gchar *nmdbus_device_get_driver_version (NMDBusDevice *object);
gchar *nmdbus_device_dup_driver_version (NMDBusDevice *object);
void nmdbus_device_set_driver_version (NMDBusDevice *object, const gchar *value);

const gchar *nmdbus_device_get_firmware_version (NMDBusDevice *object);
gchar *nmdbus_device_dup_firmware_version (NMDBusDevice *object);
void nmdbus_device_set_firmware_version (NMDBusDevice *object, const gchar *value);

guint nmdbus_device_get_capabilities (NMDBusDevice *object);
void nmdbus_device_set_capabilities (NMDBusDevice *object, guint value);

guint nmdbus_device_get_ip4_address (NMDBusDevice *object);
void nmdbus_device_set_ip4_address (NMDBusDevice *object, guint value);

guint nmdbus_device_get_state (NMDBusDevice *object);
void nmdbus_device_set_state (NMDBusDevice *object, guint value);

GVariant *nmdbus_device_get_state_reason (NMDBusDevice *object);
GVariant *nmdbus_device_dup_state_reason (NMDBusDevice *object);
void nmdbus_device_set_state_reason (NMDBusDevice *object, GVariant *value);

const gchar *nmdbus_device_get_active_connection (NMDBusDevice *object);
gchar *nmdbus_device_dup_active_connection (NMDBusDevice *object);
void nmdbus_device_set_active_connection (NMDBusDevice *object, const gchar *value);

const gchar *nmdbus_device_get_ip4_config (NMDBusDevice *object);
gchar *nmdbus_device_dup_ip4_config (NMDBusDevice *object);
void nmdbus_device_set_ip4_config (NMDBusDevice *object, const gchar *value);

const gchar *nmdbus_device_get_dhcp4_config (NMDBusDevice *object);
gchar *nmdbus_device_dup_dhcp4_config (NMDBusDevice *object);
void nmdbus_device_set_dhcp4_config (NMDBusDevice *object, const gchar *value);

const gchar *nmdbus_device_get_ip6_config (NMDBusDevice *object);
gchar *nmdbus_device_dup_ip6_config (NMDBusDevice *object);
void nmdbus_device_set_ip6_config (NMDBusDevice *object, const gchar *value);

const gchar *nmdbus_device_get_dhcp6_config (NMDBusDevice *object);
gchar *nmdbus_device_dup_dhcp6_config (NMDBusDevice *object);
void nmdbus_device_set_dhcp6_config (NMDBusDevice *object, const gchar *value);

gboolean nmdbus_device_get_managed (NMDBusDevice *object);
void nmdbus_device_set_managed (NMDBusDevice *object, gboolean value);

gboolean nmdbus_device_get_autoconnect (NMDBusDevice *object);
void nmdbus_device_set_autoconnect (NMDBusDevice *object, gboolean value);

gboolean nmdbus_device_get_firmware_missing (NMDBusDevice *object);
void nmdbus_device_set_firmware_missing (NMDBusDevice *object, gboolean value);

gboolean nmdbus_device_get_nm_plugin_missing (NMDBusDevice *object);
void nmdbus_device_set_nm_plugin_missing (NMDBusDevice *object, gboolean value);

guint nmdbus_device_get_device_type (NMDBusDevice *object);
void nmdbus_device_set_device_type (NMDBusDevice *object, guint value);

const gchar *const *nmdbus_device_get_available_connections (NMDBusDevice *object);
gchar **nmdbus_device_dup_available_connections (NMDBusDevice *object);
void nmdbus_device_set_available_connections (NMDBusDevice *object, const gchar *const *value);

const gchar *nmdbus_device_get_physical_port_id (NMDBusDevice *object);
gchar *nmdbus_device_dup_physical_port_id (NMDBusDevice *object);
void nmdbus_device_set_physical_port_id (NMDBusDevice *object, const gchar *value);

guint nmdbus_device_get_mtu (NMDBusDevice *object);
void nmdbus_device_set_mtu (NMDBusDevice *object, guint value);

guint nmdbus_device_get_metered (NMDBusDevice *object);
void nmdbus_device_set_metered (NMDBusDevice *object, guint value);

GVariant *nmdbus_device_get_lldp_neighbors (NMDBusDevice *object);
GVariant *nmdbus_device_dup_lldp_neighbors (NMDBusDevice *object);
void nmdbus_device_set_lldp_neighbors (NMDBusDevice *object, GVariant *value);

gboolean nmdbus_device_get_real (NMDBusDevice *object);
void nmdbus_device_set_real (NMDBusDevice *object, gboolean value);

guint nmdbus_device_get_ip4_connectivity (NMDBusDevice *object);
void nmdbus_device_set_ip4_connectivity (NMDBusDevice *object, guint value);

guint nmdbus_device_get_ip6_connectivity (NMDBusDevice *object);
void nmdbus_device_set_ip6_connectivity (NMDBusDevice *object, guint value);

guint nmdbus_device_get_interface_flags (NMDBusDevice *object);
void nmdbus_device_set_interface_flags (NMDBusDevice *object, guint value);

const gchar *nmdbus_device_get_hw_address (NMDBusDevice *object);
gchar *nmdbus_device_dup_hw_address (NMDBusDevice *object);
void nmdbus_device_set_hw_address (NMDBusDevice *object, const gchar *value);

const gchar *const *nmdbus_device_get_ports (NMDBusDevice *object);
gchar **nmdbus_device_dup_ports (NMDBusDevice *object);
void nmdbus_device_set_ports (NMDBusDevice *object, const gchar *const *value);


/* ---- */

#define NMDBUS_TYPE_DEVICE_PROXY (nmdbus_device_proxy_get_type ())
#define NMDBUS_DEVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_PROXY, NMDBusDeviceProxy))
#define NMDBUS_DEVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_PROXY, NMDBusDeviceProxyClass))
#define NMDBUS_DEVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_PROXY, NMDBusDeviceProxyClass))
#define NMDBUS_IS_DEVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_PROXY))
#define NMDBUS_IS_DEVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_PROXY))

typedef struct _NMDBusDeviceProxy NMDBusDeviceProxy;
typedef struct _NMDBusDeviceProxyClass NMDBusDeviceProxyClass;
typedef struct _NMDBusDeviceProxyPrivate NMDBusDeviceProxyPrivate;

struct _NMDBusDeviceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusDeviceProxyPrivate *priv;
};

struct _NMDBusDeviceProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_device_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceProxy, g_object_unref)
#endif

void nmdbus_device_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDevice *nmdbus_device_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDevice *nmdbus_device_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_device_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDevice *nmdbus_device_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDevice *nmdbus_device_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_DEVICE_SKELETON (nmdbus_device_skeleton_get_type ())
#define NMDBUS_DEVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_SKELETON, NMDBusDeviceSkeleton))
#define NMDBUS_DEVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_SKELETON, NMDBusDeviceSkeletonClass))
#define NMDBUS_DEVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_SKELETON, NMDBusDeviceSkeletonClass))
#define NMDBUS_IS_DEVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_SKELETON))
#define NMDBUS_IS_DEVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_SKELETON))

typedef struct _NMDBusDeviceSkeleton NMDBusDeviceSkeleton;
typedef struct _NMDBusDeviceSkeletonClass NMDBusDeviceSkeletonClass;
typedef struct _NMDBusDeviceSkeletonPrivate NMDBusDeviceSkeletonPrivate;

struct _NMDBusDeviceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusDeviceSkeletonPrivate *priv;
};

struct _NMDBusDeviceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_device_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceSkeleton, g_object_unref)
#endif

NMDBusDevice *nmdbus_device_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_H__ */
