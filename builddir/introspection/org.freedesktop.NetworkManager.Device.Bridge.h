/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_BRIDGE_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_BRIDGE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.Device.Bridge */

#define NMDBUS_TYPE_DEVICE_BRIDGE (nmdbus_device_bridge_get_type ())
#define NMDBUS_DEVICE_BRIDGE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_BRIDGE, NMDBusDeviceBridge))
#define NMDBUS_IS_DEVICE_BRIDGE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_BRIDGE))
#define NMDBUS_DEVICE_BRIDGE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_DEVICE_BRIDGE, NMDBusDeviceBridgeIface))

struct _NMDBusDeviceBridge;
typedef struct _NMDBusDeviceBridge NMDBusDeviceBridge;
typedef struct _NMDBusDeviceBridgeIface NMDBusDeviceBridgeIface;

struct _NMDBusDeviceBridgeIface
{
  GTypeInterface parent_iface;

  gboolean  (*get_carrier) (NMDBusDeviceBridge *object);

  const gchar * (*get_hw_address) (NMDBusDeviceBridge *object);

  const gchar *const * (*get_slaves) (NMDBusDeviceBridge *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceBridge, g_object_unref)
#endif

GType nmdbus_device_bridge_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_device_bridge_interface_info (void);
guint nmdbus_device_bridge_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
const gchar *nmdbus_device_bridge_get_hw_address (NMDBusDeviceBridge *object);
gchar *nmdbus_device_bridge_dup_hw_address (NMDBusDeviceBridge *object);
void nmdbus_device_bridge_set_hw_address (NMDBusDeviceBridge *object, const gchar *value);

gboolean nmdbus_device_bridge_get_carrier (NMDBusDeviceBridge *object);
void nmdbus_device_bridge_set_carrier (NMDBusDeviceBridge *object, gboolean value);

const gchar *const *nmdbus_device_bridge_get_slaves (NMDBusDeviceBridge *object);
gchar **nmdbus_device_bridge_dup_slaves (NMDBusDeviceBridge *object);
void nmdbus_device_bridge_set_slaves (NMDBusDeviceBridge *object, const gchar *const *value);


/* ---- */

#define NMDBUS_TYPE_DEVICE_BRIDGE_PROXY (nmdbus_device_bridge_proxy_get_type ())
#define NMDBUS_DEVICE_BRIDGE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_BRIDGE_PROXY, NMDBusDeviceBridgeProxy))
#define NMDBUS_DEVICE_BRIDGE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_BRIDGE_PROXY, NMDBusDeviceBridgeProxyClass))
#define NMDBUS_DEVICE_BRIDGE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_BRIDGE_PROXY, NMDBusDeviceBridgeProxyClass))
#define NMDBUS_IS_DEVICE_BRIDGE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_BRIDGE_PROXY))
#define NMDBUS_IS_DEVICE_BRIDGE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_BRIDGE_PROXY))

typedef struct _NMDBusDeviceBridgeProxy NMDBusDeviceBridgeProxy;
typedef struct _NMDBusDeviceBridgeProxyClass NMDBusDeviceBridgeProxyClass;
typedef struct _NMDBusDeviceBridgeProxyPrivate NMDBusDeviceBridgeProxyPrivate;

struct _NMDBusDeviceBridgeProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusDeviceBridgeProxyPrivate *priv;
};

struct _NMDBusDeviceBridgeProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_device_bridge_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceBridgeProxy, g_object_unref)
#endif

void nmdbus_device_bridge_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceBridge *nmdbus_device_bridge_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceBridge *nmdbus_device_bridge_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_device_bridge_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceBridge *nmdbus_device_bridge_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceBridge *nmdbus_device_bridge_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_DEVICE_BRIDGE_SKELETON (nmdbus_device_bridge_skeleton_get_type ())
#define NMDBUS_DEVICE_BRIDGE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_BRIDGE_SKELETON, NMDBusDeviceBridgeSkeleton))
#define NMDBUS_DEVICE_BRIDGE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_BRIDGE_SKELETON, NMDBusDeviceBridgeSkeletonClass))
#define NMDBUS_DEVICE_BRIDGE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_BRIDGE_SKELETON, NMDBusDeviceBridgeSkeletonClass))
#define NMDBUS_IS_DEVICE_BRIDGE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_BRIDGE_SKELETON))
#define NMDBUS_IS_DEVICE_BRIDGE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_BRIDGE_SKELETON))

typedef struct _NMDBusDeviceBridgeSkeleton NMDBusDeviceBridgeSkeleton;
typedef struct _NMDBusDeviceBridgeSkeletonClass NMDBusDeviceBridgeSkeletonClass;
typedef struct _NMDBusDeviceBridgeSkeletonPrivate NMDBusDeviceBridgeSkeletonPrivate;

struct _NMDBusDeviceBridgeSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusDeviceBridgeSkeletonPrivate *priv;
};

struct _NMDBusDeviceBridgeSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_device_bridge_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceBridgeSkeleton, g_object_unref)
#endif

NMDBusDeviceBridge *nmdbus_device_bridge_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_BRIDGE_H__ */
