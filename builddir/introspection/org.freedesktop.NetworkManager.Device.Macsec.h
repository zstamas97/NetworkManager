/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_MACSEC_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_MACSEC_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.Device.Macsec */

#define NMDBUS_TYPE_DEVICE_MACSEC (nmdbus_device_macsec_get_type ())
#define NMDBUS_DEVICE_MACSEC(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_MACSEC, NMDBusDeviceMacsec))
#define NMDBUS_IS_DEVICE_MACSEC(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_MACSEC))
#define NMDBUS_DEVICE_MACSEC_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_DEVICE_MACSEC, NMDBusDeviceMacsecIface))

struct _NMDBusDeviceMacsec;
typedef struct _NMDBusDeviceMacsec NMDBusDeviceMacsec;
typedef struct _NMDBusDeviceMacsecIface NMDBusDeviceMacsecIface;

struct _NMDBusDeviceMacsecIface
{
  GTypeInterface parent_iface;

  guint64  (*get_cipher_suite) (NMDBusDeviceMacsec *object);

  guchar  (*get_encoding_sa) (NMDBusDeviceMacsec *object);

  gboolean  (*get_encrypt) (NMDBusDeviceMacsec *object);

  gboolean  (*get_es) (NMDBusDeviceMacsec *object);

  guchar  (*get_icv_length) (NMDBusDeviceMacsec *object);

  gboolean  (*get_include_sci) (NMDBusDeviceMacsec *object);

  const gchar * (*get_parent) (NMDBusDeviceMacsec *object);

  gboolean  (*get_protect) (NMDBusDeviceMacsec *object);

  gboolean  (*get_replay_protect) (NMDBusDeviceMacsec *object);

  gboolean  (*get_scb) (NMDBusDeviceMacsec *object);

  guint64  (*get_sci) (NMDBusDeviceMacsec *object);

  const gchar * (*get_validation) (NMDBusDeviceMacsec *object);

  guint  (*get_window) (NMDBusDeviceMacsec *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceMacsec, g_object_unref)
#endif

GType nmdbus_device_macsec_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_device_macsec_interface_info (void);
guint nmdbus_device_macsec_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
const gchar *nmdbus_device_macsec_get_parent (NMDBusDeviceMacsec *object);
gchar *nmdbus_device_macsec_dup_parent (NMDBusDeviceMacsec *object);
void nmdbus_device_macsec_set_parent (NMDBusDeviceMacsec *object, const gchar *value);

guint64 nmdbus_device_macsec_get_sci (NMDBusDeviceMacsec *object);
void nmdbus_device_macsec_set_sci (NMDBusDeviceMacsec *object, guint64 value);

guchar nmdbus_device_macsec_get_icv_length (NMDBusDeviceMacsec *object);
void nmdbus_device_macsec_set_icv_length (NMDBusDeviceMacsec *object, guchar value);

guint64 nmdbus_device_macsec_get_cipher_suite (NMDBusDeviceMacsec *object);
void nmdbus_device_macsec_set_cipher_suite (NMDBusDeviceMacsec *object, guint64 value);

guint nmdbus_device_macsec_get_window (NMDBusDeviceMacsec *object);
void nmdbus_device_macsec_set_window (NMDBusDeviceMacsec *object, guint value);

guchar nmdbus_device_macsec_get_encoding_sa (NMDBusDeviceMacsec *object);
void nmdbus_device_macsec_set_encoding_sa (NMDBusDeviceMacsec *object, guchar value);

const gchar *nmdbus_device_macsec_get_validation (NMDBusDeviceMacsec *object);
gchar *nmdbus_device_macsec_dup_validation (NMDBusDeviceMacsec *object);
void nmdbus_device_macsec_set_validation (NMDBusDeviceMacsec *object, const gchar *value);

gboolean nmdbus_device_macsec_get_encrypt (NMDBusDeviceMacsec *object);
void nmdbus_device_macsec_set_encrypt (NMDBusDeviceMacsec *object, gboolean value);

gboolean nmdbus_device_macsec_get_protect (NMDBusDeviceMacsec *object);
void nmdbus_device_macsec_set_protect (NMDBusDeviceMacsec *object, gboolean value);

gboolean nmdbus_device_macsec_get_include_sci (NMDBusDeviceMacsec *object);
void nmdbus_device_macsec_set_include_sci (NMDBusDeviceMacsec *object, gboolean value);

gboolean nmdbus_device_macsec_get_es (NMDBusDeviceMacsec *object);
void nmdbus_device_macsec_set_es (NMDBusDeviceMacsec *object, gboolean value);

gboolean nmdbus_device_macsec_get_scb (NMDBusDeviceMacsec *object);
void nmdbus_device_macsec_set_scb (NMDBusDeviceMacsec *object, gboolean value);

gboolean nmdbus_device_macsec_get_replay_protect (NMDBusDeviceMacsec *object);
void nmdbus_device_macsec_set_replay_protect (NMDBusDeviceMacsec *object, gboolean value);


/* ---- */

#define NMDBUS_TYPE_DEVICE_MACSEC_PROXY (nmdbus_device_macsec_proxy_get_type ())
#define NMDBUS_DEVICE_MACSEC_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_MACSEC_PROXY, NMDBusDeviceMacsecProxy))
#define NMDBUS_DEVICE_MACSEC_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_MACSEC_PROXY, NMDBusDeviceMacsecProxyClass))
#define NMDBUS_DEVICE_MACSEC_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_MACSEC_PROXY, NMDBusDeviceMacsecProxyClass))
#define NMDBUS_IS_DEVICE_MACSEC_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_MACSEC_PROXY))
#define NMDBUS_IS_DEVICE_MACSEC_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_MACSEC_PROXY))

typedef struct _NMDBusDeviceMacsecProxy NMDBusDeviceMacsecProxy;
typedef struct _NMDBusDeviceMacsecProxyClass NMDBusDeviceMacsecProxyClass;
typedef struct _NMDBusDeviceMacsecProxyPrivate NMDBusDeviceMacsecProxyPrivate;

struct _NMDBusDeviceMacsecProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusDeviceMacsecProxyPrivate *priv;
};

struct _NMDBusDeviceMacsecProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_device_macsec_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceMacsecProxy, g_object_unref)
#endif

void nmdbus_device_macsec_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceMacsec *nmdbus_device_macsec_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceMacsec *nmdbus_device_macsec_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_device_macsec_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceMacsec *nmdbus_device_macsec_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceMacsec *nmdbus_device_macsec_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_DEVICE_MACSEC_SKELETON (nmdbus_device_macsec_skeleton_get_type ())
#define NMDBUS_DEVICE_MACSEC_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_MACSEC_SKELETON, NMDBusDeviceMacsecSkeleton))
#define NMDBUS_DEVICE_MACSEC_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_MACSEC_SKELETON, NMDBusDeviceMacsecSkeletonClass))
#define NMDBUS_DEVICE_MACSEC_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_MACSEC_SKELETON, NMDBusDeviceMacsecSkeletonClass))
#define NMDBUS_IS_DEVICE_MACSEC_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_MACSEC_SKELETON))
#define NMDBUS_IS_DEVICE_MACSEC_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_MACSEC_SKELETON))

typedef struct _NMDBusDeviceMacsecSkeleton NMDBusDeviceMacsecSkeleton;
typedef struct _NMDBusDeviceMacsecSkeletonClass NMDBusDeviceMacsecSkeletonClass;
typedef struct _NMDBusDeviceMacsecSkeletonPrivate NMDBusDeviceMacsecSkeletonPrivate;

struct _NMDBusDeviceMacsecSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusDeviceMacsecSkeletonPrivate *priv;
};

struct _NMDBusDeviceMacsecSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_device_macsec_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceMacsecSkeleton, g_object_unref)
#endif

NMDBusDeviceMacsec *nmdbus_device_macsec_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_MACSEC_H__ */
