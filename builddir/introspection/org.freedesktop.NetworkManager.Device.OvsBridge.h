/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_OVSBRIDGE_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_OVSBRIDGE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.Device.OvsBridge */

#define NMDBUS_TYPE_DEVICE_OVS_BRIDGE (nmdbus_device_ovs_bridge_get_type ())
#define NMDBUS_DEVICE_OVS_BRIDGE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_OVS_BRIDGE, NMDBusDeviceOvsBridge))
#define NMDBUS_IS_DEVICE_OVS_BRIDGE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_OVS_BRIDGE))
#define NMDBUS_DEVICE_OVS_BRIDGE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_DEVICE_OVS_BRIDGE, NMDBusDeviceOvsBridgeIface))

struct _NMDBusDeviceOvsBridge;
typedef struct _NMDBusDeviceOvsBridge NMDBusDeviceOvsBridge;
typedef struct _NMDBusDeviceOvsBridgeIface NMDBusDeviceOvsBridgeIface;

struct _NMDBusDeviceOvsBridgeIface
{
  GTypeInterface parent_iface;

  const gchar *const * (*get_slaves) (NMDBusDeviceOvsBridge *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceOvsBridge, g_object_unref)
#endif

GType nmdbus_device_ovs_bridge_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_device_ovs_bridge_interface_info (void);
guint nmdbus_device_ovs_bridge_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
const gchar *const *nmdbus_device_ovs_bridge_get_slaves (NMDBusDeviceOvsBridge *object);
gchar **nmdbus_device_ovs_bridge_dup_slaves (NMDBusDeviceOvsBridge *object);
void nmdbus_device_ovs_bridge_set_slaves (NMDBusDeviceOvsBridge *object, const gchar *const *value);


/* ---- */

#define NMDBUS_TYPE_DEVICE_OVS_BRIDGE_PROXY (nmdbus_device_ovs_bridge_proxy_get_type ())
#define NMDBUS_DEVICE_OVS_BRIDGE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_OVS_BRIDGE_PROXY, NMDBusDeviceOvsBridgeProxy))
#define NMDBUS_DEVICE_OVS_BRIDGE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_OVS_BRIDGE_PROXY, NMDBusDeviceOvsBridgeProxyClass))
#define NMDBUS_DEVICE_OVS_BRIDGE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_OVS_BRIDGE_PROXY, NMDBusDeviceOvsBridgeProxyClass))
#define NMDBUS_IS_DEVICE_OVS_BRIDGE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_OVS_BRIDGE_PROXY))
#define NMDBUS_IS_DEVICE_OVS_BRIDGE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_OVS_BRIDGE_PROXY))

typedef struct _NMDBusDeviceOvsBridgeProxy NMDBusDeviceOvsBridgeProxy;
typedef struct _NMDBusDeviceOvsBridgeProxyClass NMDBusDeviceOvsBridgeProxyClass;
typedef struct _NMDBusDeviceOvsBridgeProxyPrivate NMDBusDeviceOvsBridgeProxyPrivate;

struct _NMDBusDeviceOvsBridgeProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusDeviceOvsBridgeProxyPrivate *priv;
};

struct _NMDBusDeviceOvsBridgeProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_device_ovs_bridge_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceOvsBridgeProxy, g_object_unref)
#endif

void nmdbus_device_ovs_bridge_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceOvsBridge *nmdbus_device_ovs_bridge_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceOvsBridge *nmdbus_device_ovs_bridge_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_device_ovs_bridge_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceOvsBridge *nmdbus_device_ovs_bridge_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceOvsBridge *nmdbus_device_ovs_bridge_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_DEVICE_OVS_BRIDGE_SKELETON (nmdbus_device_ovs_bridge_skeleton_get_type ())
#define NMDBUS_DEVICE_OVS_BRIDGE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_OVS_BRIDGE_SKELETON, NMDBusDeviceOvsBridgeSkeleton))
#define NMDBUS_DEVICE_OVS_BRIDGE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_OVS_BRIDGE_SKELETON, NMDBusDeviceOvsBridgeSkeletonClass))
#define NMDBUS_DEVICE_OVS_BRIDGE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_OVS_BRIDGE_SKELETON, NMDBusDeviceOvsBridgeSkeletonClass))
#define NMDBUS_IS_DEVICE_OVS_BRIDGE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_OVS_BRIDGE_SKELETON))
#define NMDBUS_IS_DEVICE_OVS_BRIDGE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_OVS_BRIDGE_SKELETON))

typedef struct _NMDBusDeviceOvsBridgeSkeleton NMDBusDeviceOvsBridgeSkeleton;
typedef struct _NMDBusDeviceOvsBridgeSkeletonClass NMDBusDeviceOvsBridgeSkeletonClass;
typedef struct _NMDBusDeviceOvsBridgeSkeletonPrivate NMDBusDeviceOvsBridgeSkeletonPrivate;

struct _NMDBusDeviceOvsBridgeSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusDeviceOvsBridgeSkeletonPrivate *priv;
};

struct _NMDBusDeviceOvsBridgeSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_device_ovs_bridge_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceOvsBridgeSkeleton, g_object_unref)
#endif

NMDBusDeviceOvsBridge *nmdbus_device_ovs_bridge_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_OVSBRIDGE_H__ */
