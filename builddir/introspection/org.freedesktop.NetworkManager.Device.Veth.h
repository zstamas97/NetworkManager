/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_VETH_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_VETH_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.Device.Veth */

#define NMDBUS_TYPE_DEVICE_VETH (nmdbus_device_veth_get_type ())
#define NMDBUS_DEVICE_VETH(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_VETH, NMDBusDeviceVeth))
#define NMDBUS_IS_DEVICE_VETH(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_VETH))
#define NMDBUS_DEVICE_VETH_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_DEVICE_VETH, NMDBusDeviceVethIface))

struct _NMDBusDeviceVeth;
typedef struct _NMDBusDeviceVeth NMDBusDeviceVeth;
typedef struct _NMDBusDeviceVethIface NMDBusDeviceVethIface;

struct _NMDBusDeviceVethIface
{
  GTypeInterface parent_iface;

  const gchar * (*get_peer) (NMDBusDeviceVeth *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceVeth, g_object_unref)
#endif

GType nmdbus_device_veth_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_device_veth_interface_info (void);
guint nmdbus_device_veth_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
const gchar *nmdbus_device_veth_get_peer (NMDBusDeviceVeth *object);
gchar *nmdbus_device_veth_dup_peer (NMDBusDeviceVeth *object);
void nmdbus_device_veth_set_peer (NMDBusDeviceVeth *object, const gchar *value);


/* ---- */

#define NMDBUS_TYPE_DEVICE_VETH_PROXY (nmdbus_device_veth_proxy_get_type ())
#define NMDBUS_DEVICE_VETH_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_VETH_PROXY, NMDBusDeviceVethProxy))
#define NMDBUS_DEVICE_VETH_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_VETH_PROXY, NMDBusDeviceVethProxyClass))
#define NMDBUS_DEVICE_VETH_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_VETH_PROXY, NMDBusDeviceVethProxyClass))
#define NMDBUS_IS_DEVICE_VETH_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_VETH_PROXY))
#define NMDBUS_IS_DEVICE_VETH_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_VETH_PROXY))

typedef struct _NMDBusDeviceVethProxy NMDBusDeviceVethProxy;
typedef struct _NMDBusDeviceVethProxyClass NMDBusDeviceVethProxyClass;
typedef struct _NMDBusDeviceVethProxyPrivate NMDBusDeviceVethProxyPrivate;

struct _NMDBusDeviceVethProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusDeviceVethProxyPrivate *priv;
};

struct _NMDBusDeviceVethProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_device_veth_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceVethProxy, g_object_unref)
#endif

void nmdbus_device_veth_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceVeth *nmdbus_device_veth_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceVeth *nmdbus_device_veth_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_device_veth_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceVeth *nmdbus_device_veth_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceVeth *nmdbus_device_veth_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_DEVICE_VETH_SKELETON (nmdbus_device_veth_skeleton_get_type ())
#define NMDBUS_DEVICE_VETH_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_VETH_SKELETON, NMDBusDeviceVethSkeleton))
#define NMDBUS_DEVICE_VETH_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_VETH_SKELETON, NMDBusDeviceVethSkeletonClass))
#define NMDBUS_DEVICE_VETH_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_VETH_SKELETON, NMDBusDeviceVethSkeletonClass))
#define NMDBUS_IS_DEVICE_VETH_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_VETH_SKELETON))
#define NMDBUS_IS_DEVICE_VETH_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_VETH_SKELETON))

typedef struct _NMDBusDeviceVethSkeleton NMDBusDeviceVethSkeleton;
typedef struct _NMDBusDeviceVethSkeletonClass NMDBusDeviceVethSkeletonClass;
typedef struct _NMDBusDeviceVethSkeletonPrivate NMDBusDeviceVethSkeletonPrivate;

struct _NMDBusDeviceVethSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusDeviceVethSkeletonPrivate *priv;
};

struct _NMDBusDeviceVethSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_device_veth_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceVethSkeleton, g_object_unref)
#endif

NMDBusDeviceVeth *nmdbus_device_veth_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_VETH_H__ */
