/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_VPN_PLUGIN_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_VPN_PLUGIN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.VPN.Plugin */

#define NMDBUS_TYPE_VPN_PLUGIN (nmdbus_vpn_plugin_get_type ())
#define NMDBUS_VPN_PLUGIN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_VPN_PLUGIN, NMDBusVpnPlugin))
#define NMDBUS_IS_VPN_PLUGIN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_VPN_PLUGIN))
#define NMDBUS_VPN_PLUGIN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_VPN_PLUGIN, NMDBusVpnPluginIface))

struct _NMDBusVpnPlugin;
typedef struct _NMDBusVpnPlugin NMDBusVpnPlugin;
typedef struct _NMDBusVpnPluginIface NMDBusVpnPluginIface;

struct _NMDBusVpnPluginIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_connect) (
    NMDBusVpnPlugin *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_connection);

  gboolean (*handle_connect_interactive) (
    NMDBusVpnPlugin *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_connection,
    GVariant *arg_details);

  gboolean (*handle_disconnect) (
    NMDBusVpnPlugin *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_need_secrets) (
    NMDBusVpnPlugin *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_settings);

  gboolean (*handle_new_secrets) (
    NMDBusVpnPlugin *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_connection);

  gboolean (*handle_set_config) (
    NMDBusVpnPlugin *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_config);

  gboolean (*handle_set_failure) (
    NMDBusVpnPlugin *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_reason);

  gboolean (*handle_set_ip4_config) (
    NMDBusVpnPlugin *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_config);

  gboolean (*handle_set_ip6_config) (
    NMDBusVpnPlugin *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_config);

  guint  (*get_state) (NMDBusVpnPlugin *object);

  void (*config) (
    NMDBusVpnPlugin *object,
    GVariant *arg_config);

  void (*failure) (
    NMDBusVpnPlugin *object,
    guint arg_reason);

  void (*ip4_config) (
    NMDBusVpnPlugin *object,
    GVariant *arg_ip4config);

  void (*ip6_config) (
    NMDBusVpnPlugin *object,
    GVariant *arg_ip6config);

  void (*login_banner) (
    NMDBusVpnPlugin *object,
    const gchar *arg_banner);

  void (*secrets_required) (
    NMDBusVpnPlugin *object,
    const gchar *arg_message,
    const gchar *const *arg_secrets);

  void (*state_changed) (
    NMDBusVpnPlugin *object,
    guint arg_state);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusVpnPlugin, g_object_unref)
#endif

GType nmdbus_vpn_plugin_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_vpn_plugin_interface_info (void);
guint nmdbus_vpn_plugin_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void nmdbus_vpn_plugin_complete_connect (
    NMDBusVpnPlugin *object,
    GDBusMethodInvocation *invocation);

void nmdbus_vpn_plugin_complete_connect_interactive (
    NMDBusVpnPlugin *object,
    GDBusMethodInvocation *invocation);

void nmdbus_vpn_plugin_complete_need_secrets (
    NMDBusVpnPlugin *object,
    GDBusMethodInvocation *invocation,
    const gchar *setting_name);

void nmdbus_vpn_plugin_complete_disconnect (
    NMDBusVpnPlugin *object,
    GDBusMethodInvocation *invocation);

void nmdbus_vpn_plugin_complete_set_config (
    NMDBusVpnPlugin *object,
    GDBusMethodInvocation *invocation);

void nmdbus_vpn_plugin_complete_set_ip4_config (
    NMDBusVpnPlugin *object,
    GDBusMethodInvocation *invocation);

void nmdbus_vpn_plugin_complete_set_ip6_config (
    NMDBusVpnPlugin *object,
    GDBusMethodInvocation *invocation);

void nmdbus_vpn_plugin_complete_set_failure (
    NMDBusVpnPlugin *object,
    GDBusMethodInvocation *invocation);

void nmdbus_vpn_plugin_complete_new_secrets (
    NMDBusVpnPlugin *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void nmdbus_vpn_plugin_emit_state_changed (
    NMDBusVpnPlugin *object,
    guint arg_state);

void nmdbus_vpn_plugin_emit_secrets_required (
    NMDBusVpnPlugin *object,
    const gchar *arg_message,
    const gchar *const *arg_secrets);

void nmdbus_vpn_plugin_emit_config (
    NMDBusVpnPlugin *object,
    GVariant *arg_config);

void nmdbus_vpn_plugin_emit_ip4_config (
    NMDBusVpnPlugin *object,
    GVariant *arg_ip4config);

void nmdbus_vpn_plugin_emit_ip6_config (
    NMDBusVpnPlugin *object,
    GVariant *arg_ip6config);

void nmdbus_vpn_plugin_emit_login_banner (
    NMDBusVpnPlugin *object,
    const gchar *arg_banner);

void nmdbus_vpn_plugin_emit_failure (
    NMDBusVpnPlugin *object,
    guint arg_reason);



/* D-Bus method calls: */
void nmdbus_vpn_plugin_call_connect (
    NMDBusVpnPlugin *proxy,
    GVariant *arg_connection,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_vpn_plugin_call_connect_finish (
    NMDBusVpnPlugin *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_vpn_plugin_call_connect_sync (
    NMDBusVpnPlugin *proxy,
    GVariant *arg_connection,
    GCancellable *cancellable,
    GError **error);

void nmdbus_vpn_plugin_call_connect_interactive (
    NMDBusVpnPlugin *proxy,
    GVariant *arg_connection,
    GVariant *arg_details,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_vpn_plugin_call_connect_interactive_finish (
    NMDBusVpnPlugin *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_vpn_plugin_call_connect_interactive_sync (
    NMDBusVpnPlugin *proxy,
    GVariant *arg_connection,
    GVariant *arg_details,
    GCancellable *cancellable,
    GError **error);

void nmdbus_vpn_plugin_call_need_secrets (
    NMDBusVpnPlugin *proxy,
    GVariant *arg_settings,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_vpn_plugin_call_need_secrets_finish (
    NMDBusVpnPlugin *proxy,
    gchar **out_setting_name,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_vpn_plugin_call_need_secrets_sync (
    NMDBusVpnPlugin *proxy,
    GVariant *arg_settings,
    gchar **out_setting_name,
    GCancellable *cancellable,
    GError **error);

void nmdbus_vpn_plugin_call_disconnect (
    NMDBusVpnPlugin *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_vpn_plugin_call_disconnect_finish (
    NMDBusVpnPlugin *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_vpn_plugin_call_disconnect_sync (
    NMDBusVpnPlugin *proxy,
    GCancellable *cancellable,
    GError **error);

void nmdbus_vpn_plugin_call_set_config (
    NMDBusVpnPlugin *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_vpn_plugin_call_set_config_finish (
    NMDBusVpnPlugin *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_vpn_plugin_call_set_config_sync (
    NMDBusVpnPlugin *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GError **error);

void nmdbus_vpn_plugin_call_set_ip4_config (
    NMDBusVpnPlugin *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_vpn_plugin_call_set_ip4_config_finish (
    NMDBusVpnPlugin *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_vpn_plugin_call_set_ip4_config_sync (
    NMDBusVpnPlugin *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GError **error);

void nmdbus_vpn_plugin_call_set_ip6_config (
    NMDBusVpnPlugin *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_vpn_plugin_call_set_ip6_config_finish (
    NMDBusVpnPlugin *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_vpn_plugin_call_set_ip6_config_sync (
    NMDBusVpnPlugin *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GError **error);

void nmdbus_vpn_plugin_call_set_failure (
    NMDBusVpnPlugin *proxy,
    const gchar *arg_reason,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_vpn_plugin_call_set_failure_finish (
    NMDBusVpnPlugin *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_vpn_plugin_call_set_failure_sync (
    NMDBusVpnPlugin *proxy,
    const gchar *arg_reason,
    GCancellable *cancellable,
    GError **error);

void nmdbus_vpn_plugin_call_new_secrets (
    NMDBusVpnPlugin *proxy,
    GVariant *arg_connection,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_vpn_plugin_call_new_secrets_finish (
    NMDBusVpnPlugin *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_vpn_plugin_call_new_secrets_sync (
    NMDBusVpnPlugin *proxy,
    GVariant *arg_connection,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
guint nmdbus_vpn_plugin_get_state (NMDBusVpnPlugin *object);
void nmdbus_vpn_plugin_set_state (NMDBusVpnPlugin *object, guint value);


/* ---- */

#define NMDBUS_TYPE_VPN_PLUGIN_PROXY (nmdbus_vpn_plugin_proxy_get_type ())
#define NMDBUS_VPN_PLUGIN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_VPN_PLUGIN_PROXY, NMDBusVpnPluginProxy))
#define NMDBUS_VPN_PLUGIN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_VPN_PLUGIN_PROXY, NMDBusVpnPluginProxyClass))
#define NMDBUS_VPN_PLUGIN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_VPN_PLUGIN_PROXY, NMDBusVpnPluginProxyClass))
#define NMDBUS_IS_VPN_PLUGIN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_VPN_PLUGIN_PROXY))
#define NMDBUS_IS_VPN_PLUGIN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_VPN_PLUGIN_PROXY))

typedef struct _NMDBusVpnPluginProxy NMDBusVpnPluginProxy;
typedef struct _NMDBusVpnPluginProxyClass NMDBusVpnPluginProxyClass;
typedef struct _NMDBusVpnPluginProxyPrivate NMDBusVpnPluginProxyPrivate;

struct _NMDBusVpnPluginProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusVpnPluginProxyPrivate *priv;
};

struct _NMDBusVpnPluginProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_vpn_plugin_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusVpnPluginProxy, g_object_unref)
#endif

void nmdbus_vpn_plugin_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusVpnPlugin *nmdbus_vpn_plugin_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusVpnPlugin *nmdbus_vpn_plugin_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_vpn_plugin_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusVpnPlugin *nmdbus_vpn_plugin_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusVpnPlugin *nmdbus_vpn_plugin_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_VPN_PLUGIN_SKELETON (nmdbus_vpn_plugin_skeleton_get_type ())
#define NMDBUS_VPN_PLUGIN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_VPN_PLUGIN_SKELETON, NMDBusVpnPluginSkeleton))
#define NMDBUS_VPN_PLUGIN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_VPN_PLUGIN_SKELETON, NMDBusVpnPluginSkeletonClass))
#define NMDBUS_VPN_PLUGIN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_VPN_PLUGIN_SKELETON, NMDBusVpnPluginSkeletonClass))
#define NMDBUS_IS_VPN_PLUGIN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_VPN_PLUGIN_SKELETON))
#define NMDBUS_IS_VPN_PLUGIN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_VPN_PLUGIN_SKELETON))

typedef struct _NMDBusVpnPluginSkeleton NMDBusVpnPluginSkeleton;
typedef struct _NMDBusVpnPluginSkeletonClass NMDBusVpnPluginSkeletonClass;
typedef struct _NMDBusVpnPluginSkeletonPrivate NMDBusVpnPluginSkeletonPrivate;

struct _NMDBusVpnPluginSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusVpnPluginSkeletonPrivate *priv;
};

struct _NMDBusVpnPluginSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_vpn_plugin_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusVpnPluginSkeleton, g_object_unref)
#endif

NMDBusVpnPlugin *nmdbus_vpn_plugin_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_VPN_PLUGIN_H__ */
