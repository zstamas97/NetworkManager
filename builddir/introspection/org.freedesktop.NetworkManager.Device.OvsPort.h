/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_OVSPORT_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_OVSPORT_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.Device.OvsPort */

#define NMDBUS_TYPE_DEVICE_OVS_PORT (nmdbus_device_ovs_port_get_type ())
#define NMDBUS_DEVICE_OVS_PORT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_OVS_PORT, NMDBusDeviceOvsPort))
#define NMDBUS_IS_DEVICE_OVS_PORT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_OVS_PORT))
#define NMDBUS_DEVICE_OVS_PORT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_DEVICE_OVS_PORT, NMDBusDeviceOvsPortIface))

struct _NMDBusDeviceOvsPort;
typedef struct _NMDBusDeviceOvsPort NMDBusDeviceOvsPort;
typedef struct _NMDBusDeviceOvsPortIface NMDBusDeviceOvsPortIface;

struct _NMDBusDeviceOvsPortIface
{
  GTypeInterface parent_iface;

  const gchar *const * (*get_slaves) (NMDBusDeviceOvsPort *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceOvsPort, g_object_unref)
#endif

GType nmdbus_device_ovs_port_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_device_ovs_port_interface_info (void);
guint nmdbus_device_ovs_port_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
const gchar *const *nmdbus_device_ovs_port_get_slaves (NMDBusDeviceOvsPort *object);
gchar **nmdbus_device_ovs_port_dup_slaves (NMDBusDeviceOvsPort *object);
void nmdbus_device_ovs_port_set_slaves (NMDBusDeviceOvsPort *object, const gchar *const *value);


/* ---- */

#define NMDBUS_TYPE_DEVICE_OVS_PORT_PROXY (nmdbus_device_ovs_port_proxy_get_type ())
#define NMDBUS_DEVICE_OVS_PORT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_OVS_PORT_PROXY, NMDBusDeviceOvsPortProxy))
#define NMDBUS_DEVICE_OVS_PORT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_OVS_PORT_PROXY, NMDBusDeviceOvsPortProxyClass))
#define NMDBUS_DEVICE_OVS_PORT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_OVS_PORT_PROXY, NMDBusDeviceOvsPortProxyClass))
#define NMDBUS_IS_DEVICE_OVS_PORT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_OVS_PORT_PROXY))
#define NMDBUS_IS_DEVICE_OVS_PORT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_OVS_PORT_PROXY))

typedef struct _NMDBusDeviceOvsPortProxy NMDBusDeviceOvsPortProxy;
typedef struct _NMDBusDeviceOvsPortProxyClass NMDBusDeviceOvsPortProxyClass;
typedef struct _NMDBusDeviceOvsPortProxyPrivate NMDBusDeviceOvsPortProxyPrivate;

struct _NMDBusDeviceOvsPortProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusDeviceOvsPortProxyPrivate *priv;
};

struct _NMDBusDeviceOvsPortProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_device_ovs_port_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceOvsPortProxy, g_object_unref)
#endif

void nmdbus_device_ovs_port_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceOvsPort *nmdbus_device_ovs_port_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceOvsPort *nmdbus_device_ovs_port_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_device_ovs_port_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceOvsPort *nmdbus_device_ovs_port_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceOvsPort *nmdbus_device_ovs_port_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_DEVICE_OVS_PORT_SKELETON (nmdbus_device_ovs_port_skeleton_get_type ())
#define NMDBUS_DEVICE_OVS_PORT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_OVS_PORT_SKELETON, NMDBusDeviceOvsPortSkeleton))
#define NMDBUS_DEVICE_OVS_PORT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_OVS_PORT_SKELETON, NMDBusDeviceOvsPortSkeletonClass))
#define NMDBUS_DEVICE_OVS_PORT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_OVS_PORT_SKELETON, NMDBusDeviceOvsPortSkeletonClass))
#define NMDBUS_IS_DEVICE_OVS_PORT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_OVS_PORT_SKELETON))
#define NMDBUS_IS_DEVICE_OVS_PORT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_OVS_PORT_SKELETON))

typedef struct _NMDBusDeviceOvsPortSkeleton NMDBusDeviceOvsPortSkeleton;
typedef struct _NMDBusDeviceOvsPortSkeletonClass NMDBusDeviceOvsPortSkeletonClass;
typedef struct _NMDBusDeviceOvsPortSkeletonPrivate NMDBusDeviceOvsPortSkeletonPrivate;

struct _NMDBusDeviceOvsPortSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusDeviceOvsPortSkeletonPrivate *priv;
};

struct _NMDBusDeviceOvsPortSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_device_ovs_port_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceOvsPortSkeleton, g_object_unref)
#endif

NMDBusDeviceOvsPort *nmdbus_device_ovs_port_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_OVSPORT_H__ */
