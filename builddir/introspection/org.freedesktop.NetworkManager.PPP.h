/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_PPP_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_PPP_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.PPP */

#define NMDBUS_TYPE_PPP_MANAGER (nmdbus_ppp_manager_get_type ())
#define NMDBUS_PPP_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_PPP_MANAGER, NMDBusPPPManager))
#define NMDBUS_IS_PPP_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_PPP_MANAGER))
#define NMDBUS_PPP_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_PPP_MANAGER, NMDBusPPPManagerIface))

struct _NMDBusPPPManager;
typedef struct _NMDBusPPPManager NMDBusPPPManager;
typedef struct _NMDBusPPPManagerIface NMDBusPPPManagerIface;

struct _NMDBusPPPManagerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_need_secrets) (
    NMDBusPPPManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_ifindex) (
    NMDBusPPPManager *object,
    GDBusMethodInvocation *invocation,
    gint arg_ifindex);

  gboolean (*handle_set_ip4_config) (
    NMDBusPPPManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_config);

  gboolean (*handle_set_ip6_config) (
    NMDBusPPPManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_config);

  gboolean (*handle_set_state) (
    NMDBusPPPManager *object,
    GDBusMethodInvocation *invocation,
    guint arg_state);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusPPPManager, g_object_unref)
#endif

GType nmdbus_ppp_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_ppp_manager_interface_info (void);
guint nmdbus_ppp_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void nmdbus_ppp_manager_complete_need_secrets (
    NMDBusPPPManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *username,
    const gchar *password);

void nmdbus_ppp_manager_complete_set_ip4_config (
    NMDBusPPPManager *object,
    GDBusMethodInvocation *invocation);

void nmdbus_ppp_manager_complete_set_ip6_config (
    NMDBusPPPManager *object,
    GDBusMethodInvocation *invocation);

void nmdbus_ppp_manager_complete_set_state (
    NMDBusPPPManager *object,
    GDBusMethodInvocation *invocation);

void nmdbus_ppp_manager_complete_set_ifindex (
    NMDBusPPPManager *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void nmdbus_ppp_manager_call_need_secrets (
    NMDBusPPPManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_ppp_manager_call_need_secrets_finish (
    NMDBusPPPManager *proxy,
    gchar **out_username,
    gchar **out_password,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_ppp_manager_call_need_secrets_sync (
    NMDBusPPPManager *proxy,
    gchar **out_username,
    gchar **out_password,
    GCancellable *cancellable,
    GError **error);

void nmdbus_ppp_manager_call_set_ip4_config (
    NMDBusPPPManager *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_ppp_manager_call_set_ip4_config_finish (
    NMDBusPPPManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_ppp_manager_call_set_ip4_config_sync (
    NMDBusPPPManager *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GError **error);

void nmdbus_ppp_manager_call_set_ip6_config (
    NMDBusPPPManager *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_ppp_manager_call_set_ip6_config_finish (
    NMDBusPPPManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_ppp_manager_call_set_ip6_config_sync (
    NMDBusPPPManager *proxy,
    GVariant *arg_config,
    GCancellable *cancellable,
    GError **error);

void nmdbus_ppp_manager_call_set_state (
    NMDBusPPPManager *proxy,
    guint arg_state,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_ppp_manager_call_set_state_finish (
    NMDBusPPPManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_ppp_manager_call_set_state_sync (
    NMDBusPPPManager *proxy,
    guint arg_state,
    GCancellable *cancellable,
    GError **error);

void nmdbus_ppp_manager_call_set_ifindex (
    NMDBusPPPManager *proxy,
    gint arg_ifindex,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_ppp_manager_call_set_ifindex_finish (
    NMDBusPPPManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_ppp_manager_call_set_ifindex_sync (
    NMDBusPPPManager *proxy,
    gint arg_ifindex,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define NMDBUS_TYPE_PPP_MANAGER_PROXY (nmdbus_ppp_manager_proxy_get_type ())
#define NMDBUS_PPP_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_PPP_MANAGER_PROXY, NMDBusPPPManagerProxy))
#define NMDBUS_PPP_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_PPP_MANAGER_PROXY, NMDBusPPPManagerProxyClass))
#define NMDBUS_PPP_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_PPP_MANAGER_PROXY, NMDBusPPPManagerProxyClass))
#define NMDBUS_IS_PPP_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_PPP_MANAGER_PROXY))
#define NMDBUS_IS_PPP_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_PPP_MANAGER_PROXY))

typedef struct _NMDBusPPPManagerProxy NMDBusPPPManagerProxy;
typedef struct _NMDBusPPPManagerProxyClass NMDBusPPPManagerProxyClass;
typedef struct _NMDBusPPPManagerProxyPrivate NMDBusPPPManagerProxyPrivate;

struct _NMDBusPPPManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusPPPManagerProxyPrivate *priv;
};

struct _NMDBusPPPManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_ppp_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusPPPManagerProxy, g_object_unref)
#endif

void nmdbus_ppp_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusPPPManager *nmdbus_ppp_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusPPPManager *nmdbus_ppp_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_ppp_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusPPPManager *nmdbus_ppp_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusPPPManager *nmdbus_ppp_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_PPP_MANAGER_SKELETON (nmdbus_ppp_manager_skeleton_get_type ())
#define NMDBUS_PPP_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_PPP_MANAGER_SKELETON, NMDBusPPPManagerSkeleton))
#define NMDBUS_PPP_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_PPP_MANAGER_SKELETON, NMDBusPPPManagerSkeletonClass))
#define NMDBUS_PPP_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_PPP_MANAGER_SKELETON, NMDBusPPPManagerSkeletonClass))
#define NMDBUS_IS_PPP_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_PPP_MANAGER_SKELETON))
#define NMDBUS_IS_PPP_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_PPP_MANAGER_SKELETON))

typedef struct _NMDBusPPPManagerSkeleton NMDBusPPPManagerSkeleton;
typedef struct _NMDBusPPPManagerSkeletonClass NMDBusPPPManagerSkeletonClass;
typedef struct _NMDBusPPPManagerSkeletonPrivate NMDBusPPPManagerSkeletonPrivate;

struct _NMDBusPPPManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusPPPManagerSkeletonPrivate *priv;
};

struct _NMDBusPPPManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_ppp_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusPPPManagerSkeleton, g_object_unref)
#endif

NMDBusPPPManager *nmdbus_ppp_manager_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_PPP_H__ */
