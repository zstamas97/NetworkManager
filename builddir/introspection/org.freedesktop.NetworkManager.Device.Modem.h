/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_MODEM_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_MODEM_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.Device.Modem */

#define NMDBUS_TYPE_DEVICE_MODEM (nmdbus_device_modem_get_type ())
#define NMDBUS_DEVICE_MODEM(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_MODEM, NMDBusDeviceModem))
#define NMDBUS_IS_DEVICE_MODEM(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_MODEM))
#define NMDBUS_DEVICE_MODEM_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_DEVICE_MODEM, NMDBusDeviceModemIface))

struct _NMDBusDeviceModem;
typedef struct _NMDBusDeviceModem NMDBusDeviceModem;
typedef struct _NMDBusDeviceModemIface NMDBusDeviceModemIface;

struct _NMDBusDeviceModemIface
{
  GTypeInterface parent_iface;

  const gchar * (*get_apn) (NMDBusDeviceModem *object);

  guint  (*get_current_capabilities) (NMDBusDeviceModem *object);

  const gchar * (*get_device_id) (NMDBusDeviceModem *object);

  guint  (*get_modem_capabilities) (NMDBusDeviceModem *object);

  const gchar * (*get_operator_code) (NMDBusDeviceModem *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceModem, g_object_unref)
#endif

GType nmdbus_device_modem_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_device_modem_interface_info (void);
guint nmdbus_device_modem_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
guint nmdbus_device_modem_get_modem_capabilities (NMDBusDeviceModem *object);
void nmdbus_device_modem_set_modem_capabilities (NMDBusDeviceModem *object, guint value);

guint nmdbus_device_modem_get_current_capabilities (NMDBusDeviceModem *object);
void nmdbus_device_modem_set_current_capabilities (NMDBusDeviceModem *object, guint value);

const gchar *nmdbus_device_modem_get_device_id (NMDBusDeviceModem *object);
gchar *nmdbus_device_modem_dup_device_id (NMDBusDeviceModem *object);
void nmdbus_device_modem_set_device_id (NMDBusDeviceModem *object, const gchar *value);

const gchar *nmdbus_device_modem_get_operator_code (NMDBusDeviceModem *object);
gchar *nmdbus_device_modem_dup_operator_code (NMDBusDeviceModem *object);
void nmdbus_device_modem_set_operator_code (NMDBusDeviceModem *object, const gchar *value);

const gchar *nmdbus_device_modem_get_apn (NMDBusDeviceModem *object);
gchar *nmdbus_device_modem_dup_apn (NMDBusDeviceModem *object);
void nmdbus_device_modem_set_apn (NMDBusDeviceModem *object, const gchar *value);


/* ---- */

#define NMDBUS_TYPE_DEVICE_MODEM_PROXY (nmdbus_device_modem_proxy_get_type ())
#define NMDBUS_DEVICE_MODEM_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_MODEM_PROXY, NMDBusDeviceModemProxy))
#define NMDBUS_DEVICE_MODEM_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_MODEM_PROXY, NMDBusDeviceModemProxyClass))
#define NMDBUS_DEVICE_MODEM_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_MODEM_PROXY, NMDBusDeviceModemProxyClass))
#define NMDBUS_IS_DEVICE_MODEM_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_MODEM_PROXY))
#define NMDBUS_IS_DEVICE_MODEM_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_MODEM_PROXY))

typedef struct _NMDBusDeviceModemProxy NMDBusDeviceModemProxy;
typedef struct _NMDBusDeviceModemProxyClass NMDBusDeviceModemProxyClass;
typedef struct _NMDBusDeviceModemProxyPrivate NMDBusDeviceModemProxyPrivate;

struct _NMDBusDeviceModemProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusDeviceModemProxyPrivate *priv;
};

struct _NMDBusDeviceModemProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_device_modem_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceModemProxy, g_object_unref)
#endif

void nmdbus_device_modem_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceModem *nmdbus_device_modem_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceModem *nmdbus_device_modem_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_device_modem_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceModem *nmdbus_device_modem_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceModem *nmdbus_device_modem_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_DEVICE_MODEM_SKELETON (nmdbus_device_modem_skeleton_get_type ())
#define NMDBUS_DEVICE_MODEM_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_MODEM_SKELETON, NMDBusDeviceModemSkeleton))
#define NMDBUS_DEVICE_MODEM_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_MODEM_SKELETON, NMDBusDeviceModemSkeletonClass))
#define NMDBUS_DEVICE_MODEM_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_MODEM_SKELETON, NMDBusDeviceModemSkeletonClass))
#define NMDBUS_IS_DEVICE_MODEM_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_MODEM_SKELETON))
#define NMDBUS_IS_DEVICE_MODEM_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_MODEM_SKELETON))

typedef struct _NMDBusDeviceModemSkeleton NMDBusDeviceModemSkeleton;
typedef struct _NMDBusDeviceModemSkeletonClass NMDBusDeviceModemSkeletonClass;
typedef struct _NMDBusDeviceModemSkeletonPrivate NMDBusDeviceModemSkeletonPrivate;

struct _NMDBusDeviceModemSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusDeviceModemSkeletonPrivate *priv;
};

struct _NMDBusDeviceModemSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_device_modem_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceModemSkeleton, g_object_unref)
#endif

NMDBusDeviceModem *nmdbus_device_modem_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_MODEM_H__ */
