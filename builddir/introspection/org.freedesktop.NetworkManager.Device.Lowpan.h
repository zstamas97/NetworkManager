/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_LOWPAN_H__
#define __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_LOWPAN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.Device.Lowpan */

#define NMDBUS_TYPE_DEVICE_LOWPAN (nmdbus_device_lowpan_get_type ())
#define NMDBUS_DEVICE_LOWPAN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_LOWPAN, NMDBusDeviceLowpan))
#define NMDBUS_IS_DEVICE_LOWPAN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_LOWPAN))
#define NMDBUS_DEVICE_LOWPAN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_DEVICE_LOWPAN, NMDBusDeviceLowpanIface))

struct _NMDBusDeviceLowpan;
typedef struct _NMDBusDeviceLowpan NMDBusDeviceLowpan;
typedef struct _NMDBusDeviceLowpanIface NMDBusDeviceLowpanIface;

struct _NMDBusDeviceLowpanIface
{
  GTypeInterface parent_iface;

  const gchar * (*get_hw_address) (NMDBusDeviceLowpan *object);

  const gchar * (*get_parent) (NMDBusDeviceLowpan *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceLowpan, g_object_unref)
#endif

GType nmdbus_device_lowpan_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_device_lowpan_interface_info (void);
guint nmdbus_device_lowpan_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
const gchar *nmdbus_device_lowpan_get_hw_address (NMDBusDeviceLowpan *object);
gchar *nmdbus_device_lowpan_dup_hw_address (NMDBusDeviceLowpan *object);
void nmdbus_device_lowpan_set_hw_address (NMDBusDeviceLowpan *object, const gchar *value);

const gchar *nmdbus_device_lowpan_get_parent (NMDBusDeviceLowpan *object);
gchar *nmdbus_device_lowpan_dup_parent (NMDBusDeviceLowpan *object);
void nmdbus_device_lowpan_set_parent (NMDBusDeviceLowpan *object, const gchar *value);


/* ---- */

#define NMDBUS_TYPE_DEVICE_LOWPAN_PROXY (nmdbus_device_lowpan_proxy_get_type ())
#define NMDBUS_DEVICE_LOWPAN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_LOWPAN_PROXY, NMDBusDeviceLowpanProxy))
#define NMDBUS_DEVICE_LOWPAN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_LOWPAN_PROXY, NMDBusDeviceLowpanProxyClass))
#define NMDBUS_DEVICE_LOWPAN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_LOWPAN_PROXY, NMDBusDeviceLowpanProxyClass))
#define NMDBUS_IS_DEVICE_LOWPAN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_LOWPAN_PROXY))
#define NMDBUS_IS_DEVICE_LOWPAN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_LOWPAN_PROXY))

typedef struct _NMDBusDeviceLowpanProxy NMDBusDeviceLowpanProxy;
typedef struct _NMDBusDeviceLowpanProxyClass NMDBusDeviceLowpanProxyClass;
typedef struct _NMDBusDeviceLowpanProxyPrivate NMDBusDeviceLowpanProxyPrivate;

struct _NMDBusDeviceLowpanProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusDeviceLowpanProxyPrivate *priv;
};

struct _NMDBusDeviceLowpanProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_device_lowpan_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceLowpanProxy, g_object_unref)
#endif

void nmdbus_device_lowpan_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceLowpan *nmdbus_device_lowpan_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceLowpan *nmdbus_device_lowpan_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_device_lowpan_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceLowpan *nmdbus_device_lowpan_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceLowpan *nmdbus_device_lowpan_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_DEVICE_LOWPAN_SKELETON (nmdbus_device_lowpan_skeleton_get_type ())
#define NMDBUS_DEVICE_LOWPAN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_LOWPAN_SKELETON, NMDBusDeviceLowpanSkeleton))
#define NMDBUS_DEVICE_LOWPAN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_LOWPAN_SKELETON, NMDBusDeviceLowpanSkeletonClass))
#define NMDBUS_DEVICE_LOWPAN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_LOWPAN_SKELETON, NMDBusDeviceLowpanSkeletonClass))
#define NMDBUS_IS_DEVICE_LOWPAN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_LOWPAN_SKELETON))
#define NMDBUS_IS_DEVICE_LOWPAN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_LOWPAN_SKELETON))

typedef struct _NMDBusDeviceLowpanSkeleton NMDBusDeviceLowpanSkeleton;
typedef struct _NMDBusDeviceLowpanSkeletonClass NMDBusDeviceLowpanSkeletonClass;
typedef struct _NMDBusDeviceLowpanSkeletonPrivate NMDBusDeviceLowpanSkeletonPrivate;

struct _NMDBusDeviceLowpanSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusDeviceLowpanSkeletonPrivate *priv;
};

struct _NMDBusDeviceLowpanSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_device_lowpan_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDeviceLowpanSkeleton, g_object_unref)
#endif

NMDBusDeviceLowpan *nmdbus_device_lowpan_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_NETWORKMANAGER_DEVICE_LOWPAN_H__ */
