/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __NMDBUS_DISPATCHER_H__
#define __NMDBUS_DISPATCHER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.nm_dispatcher */

#define NMDBUS_TYPE_DISPATCHER (nmdbus_dispatcher_get_type ())
#define NMDBUS_DISPATCHER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DISPATCHER, NMDBusDispatcher))
#define NMDBUS_IS_DISPATCHER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DISPATCHER))
#define NMDBUS_DISPATCHER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_DISPATCHER, NMDBusDispatcherIface))

struct _NMDBusDispatcher;
typedef struct _NMDBusDispatcher NMDBusDispatcher;
typedef struct _NMDBusDispatcherIface NMDBusDispatcherIface;

struct _NMDBusDispatcherIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_action) (
    NMDBusDispatcher *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_action,
    GVariant *arg_connection,
    GVariant *arg_connection_properties,
    GVariant *arg_device_properties,
    GVariant *arg_device_proxy_properties,
    GVariant *arg_device_ip4_config,
    GVariant *arg_device_ip6_config,
    GVariant *arg_device_dhcp4_config,
    GVariant *arg_device_dhcp6_config,
    const gchar *arg_connectivity_state,
    const gchar *arg_vpn_ip_iface,
    GVariant *arg_vpn_proxy_properties,
    GVariant *arg_vpn_ip4_config,
    GVariant *arg_vpn_ip6_config,
    gboolean arg_debug);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDispatcher, g_object_unref)
#endif

GType nmdbus_dispatcher_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_dispatcher_interface_info (void);
guint nmdbus_dispatcher_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void nmdbus_dispatcher_complete_action (
    NMDBusDispatcher *object,
    GDBusMethodInvocation *invocation,
    GVariant *results);



/* D-Bus method calls: */
void nmdbus_dispatcher_call_action (
    NMDBusDispatcher *proxy,
    const gchar *arg_action,
    GVariant *arg_connection,
    GVariant *arg_connection_properties,
    GVariant *arg_device_properties,
    GVariant *arg_device_proxy_properties,
    GVariant *arg_device_ip4_config,
    GVariant *arg_device_ip6_config,
    GVariant *arg_device_dhcp4_config,
    GVariant *arg_device_dhcp6_config,
    const gchar *arg_connectivity_state,
    const gchar *arg_vpn_ip_iface,
    GVariant *arg_vpn_proxy_properties,
    GVariant *arg_vpn_ip4_config,
    GVariant *arg_vpn_ip6_config,
    gboolean arg_debug,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nmdbus_dispatcher_call_action_finish (
    NMDBusDispatcher *proxy,
    GVariant **out_results,
    GAsyncResult *res,
    GError **error);

gboolean nmdbus_dispatcher_call_action_sync (
    NMDBusDispatcher *proxy,
    const gchar *arg_action,
    GVariant *arg_connection,
    GVariant *arg_connection_properties,
    GVariant *arg_device_properties,
    GVariant *arg_device_proxy_properties,
    GVariant *arg_device_ip4_config,
    GVariant *arg_device_ip6_config,
    GVariant *arg_device_dhcp4_config,
    GVariant *arg_device_dhcp6_config,
    const gchar *arg_connectivity_state,
    const gchar *arg_vpn_ip_iface,
    GVariant *arg_vpn_proxy_properties,
    GVariant *arg_vpn_ip4_config,
    GVariant *arg_vpn_ip6_config,
    gboolean arg_debug,
    GVariant **out_results,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define NMDBUS_TYPE_DISPATCHER_PROXY (nmdbus_dispatcher_proxy_get_type ())
#define NMDBUS_DISPATCHER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DISPATCHER_PROXY, NMDBusDispatcherProxy))
#define NMDBUS_DISPATCHER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DISPATCHER_PROXY, NMDBusDispatcherProxyClass))
#define NMDBUS_DISPATCHER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DISPATCHER_PROXY, NMDBusDispatcherProxyClass))
#define NMDBUS_IS_DISPATCHER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DISPATCHER_PROXY))
#define NMDBUS_IS_DISPATCHER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DISPATCHER_PROXY))

typedef struct _NMDBusDispatcherProxy NMDBusDispatcherProxy;
typedef struct _NMDBusDispatcherProxyClass NMDBusDispatcherProxyClass;
typedef struct _NMDBusDispatcherProxyPrivate NMDBusDispatcherProxyPrivate;

struct _NMDBusDispatcherProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusDispatcherProxyPrivate *priv;
};

struct _NMDBusDispatcherProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_dispatcher_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDispatcherProxy, g_object_unref)
#endif

void nmdbus_dispatcher_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDispatcher *nmdbus_dispatcher_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDispatcher *nmdbus_dispatcher_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_dispatcher_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDispatcher *nmdbus_dispatcher_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDispatcher *nmdbus_dispatcher_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_DISPATCHER_SKELETON (nmdbus_dispatcher_skeleton_get_type ())
#define NMDBUS_DISPATCHER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DISPATCHER_SKELETON, NMDBusDispatcherSkeleton))
#define NMDBUS_DISPATCHER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DISPATCHER_SKELETON, NMDBusDispatcherSkeletonClass))
#define NMDBUS_DISPATCHER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DISPATCHER_SKELETON, NMDBusDispatcherSkeletonClass))
#define NMDBUS_IS_DISPATCHER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DISPATCHER_SKELETON))
#define NMDBUS_IS_DISPATCHER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DISPATCHER_SKELETON))

typedef struct _NMDBusDispatcherSkeleton NMDBusDispatcherSkeleton;
typedef struct _NMDBusDispatcherSkeletonClass NMDBusDispatcherSkeletonClass;
typedef struct _NMDBusDispatcherSkeletonPrivate NMDBusDispatcherSkeletonPrivate;

struct _NMDBusDispatcherSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusDispatcherSkeletonPrivate *priv;
};

struct _NMDBusDispatcherSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_dispatcher_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NMDBusDispatcherSkeleton, g_object_unref)
#endif

NMDBusDispatcher *nmdbus_dispatcher_skeleton_new (void);


G_END_DECLS

#endif /* __NMDBUS_DISPATCHER_H__ */
